import { ApolloClient, InMemoryCache, createHttpLink, ApolloLink, from } from '@apollo/client';
import { setContext } from '@apollo/client/link/context';
import { onError } from '@apollo/client/link/error';
import AsyncStorage from '@react-native-async-storage/async-storage';
import Constants from 'expo-constants';

// Get API URL from environment
const API_URL = process.env.EXPO_PUBLIC_API_URL || 'http://localhost:3000';
const GRAPHQL_ENDPOINT = `${API_URL}/api/graphql`;

// Storage keys
const ACCESS_TOKEN_KEY = 'accessToken';
const REFRESH_TOKEN_KEY = 'refreshToken';
const USER_KEY = 'user';

// Token management functions
export const TokenManager = {
  async getAccessToken(): Promise<string | null> {
    try {
      return await AsyncStorage.getItem(ACCESS_TOKEN_KEY);
    } catch (error) {
      console.error('Error getting access token:', error);
      return null;
    }
  },

  async setAccessToken(token: string): Promise<void> {
    try {
      await AsyncStorage.setItem(ACCESS_TOKEN_KEY, token);
    } catch (error) {
      console.error('Error saving access token:', error);
    }
  },

  async getRefreshToken(): Promise<string | null> {
    try {
      return await AsyncStorage.getItem(REFRESH_TOKEN_KEY);
    } catch (error) {
      console.error('Error getting refresh token:', error);
      return null;
    }
  },

  async setRefreshToken(token: string): Promise<void> {
    try {
      await AsyncStorage.setItem(REFRESH_TOKEN_KEY, token);
    } catch (error) {
      console.error('Error saving refresh token:', error);
    }
  },

  async clearTokens(): Promise<void> {
    try {
      await AsyncStorage.multiRemove([ACCESS_TOKEN_KEY, REFRESH_TOKEN_KEY, USER_KEY]);
    } catch (error) {
      console.error('Error clearing tokens:', error);
    }
  },

  async saveUser(user: any): Promise<void> {
    try {
      await AsyncStorage.setItem(USER_KEY, JSON.stringify(user));
    } catch (error) {
      console.error('Error saving user:', error);
    }
  },

  async getUser(): Promise<any | null> {
    try {
      const userStr = await AsyncStorage.getItem(USER_KEY);
      return userStr ? JSON.parse(userStr) : null;
    } catch (error) {
      console.error('Error getting user:', error);
      return null;
    }
  },
};

// HTTP link
const httpLink = createHttpLink({
  uri: GRAPHQL_ENDPOINT,
});

// Auth link
const authLink = setContext(async (_, { headers }) => {
  const token = await TokenManager.getAccessToken();

  return {
    headers: {
      ...headers,
      authorization: token ? `Bearer ${token}` : '',
      'x-app-version': Constants.expoConfig?.version || '1.0.0',
    },
  };
});

// Error link for handling GraphQL errors
const errorLink = onError(({ graphQLErrors, networkError, operation, forward }) => {
  if (graphQLErrors) {
    graphQLErrors.forEach(({ message, extensions }) => {
      console.log(`[GraphQL error]: Message: ${message}`);

      // Handle specific error codes
      if (extensions?.code === 'UNAUTHENTICATED') {
        // Token expired or invalid, try to refresh
        handleTokenRefresh();
      }
    });
  }

  if (networkError) {
    console.log(`[Network error]: ${networkError}`);

    // Handle network errors
    if ('statusCode' in networkError) {
      switch (networkError.statusCode) {
        case 401:
          // Unauthorized, clear tokens and redirect to login
          TokenManager.clearTokens();
          // Navigate to login screen (you'll need to implement this)
          break;
        case 503:
          // Service unavailable
          console.error('Service unavailable. Please try again later.');
          break;
        default:
          console.error(`Network error: ${networkError.statusCode}`);
      }
    }
  }
});

// Token refresh function
async function handleTokenRefresh() {
  const refreshToken = await TokenManager.getRefreshToken();

  if (!refreshToken) {
    // No refresh token, redirect to login
    await TokenManager.clearTokens();
    return;
  }

  try {
    // Call the refresh token mutation
    const response = await fetch(GRAPHQL_ENDPOINT, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        query: `
          mutation RefreshToken($refreshToken: String!) {
            refreshToken(refreshToken: $refreshToken) {
              accessToken
              refreshToken
              user {
                id
                email
                name
                role
              }
            }
          }
        `,
        variables: { refreshToken },
      }),
    });

    const data = await response.json();

    if (data.data?.refreshToken) {
      const { accessToken, refreshToken: newRefreshToken, user } = data.data.refreshToken;

      // Save new tokens
      await TokenManager.setAccessToken(accessToken);
      await TokenManager.setRefreshToken(newRefreshToken);
      await TokenManager.saveUser(user);

      // Retry the original request
      // This will be handled by Apollo automatically
    } else {
      // Refresh failed, clear tokens and redirect to login
      await TokenManager.clearTokens();
    }
  } catch (error) {
    console.error('Token refresh error:', error);
    await TokenManager.clearTokens();
  }
}

// Apollo Client instance
export const apolloClient = new ApolloClient({
  link: from([errorLink, authLink, httpLink]),
  cache: new InMemoryCache({
    typePolicies: {
      Query: {
        fields: {
          users: {
            keyArgs: false,
            merge(existing = { items: [] }, incoming) {
              return {
                ...incoming,
                items: [...existing.items, ...incoming.items],
              };
            },
          },
          organizations: {
            keyArgs: false,
            merge(existing = { items: [] }, incoming) {
              return {
                ...incoming,
                items: [...existing.items, ...incoming.items],
              };
            },
          },
        },
      },
    },
  }),
  defaultOptions: {
    watchQuery: {
      fetchPolicy: 'cache-and-network',
      errorPolicy: 'all',
    },
    query: {
      fetchPolicy: 'cache-first',
      errorPolicy: 'all',
    },
    mutate: {
      errorPolicy: 'all',
    },
  },
});

// Export a function to reset the client (useful for logout)
export const resetApolloClient = () => {
  apolloClient.clearStore();
  apolloClient.cache.reset();
};