'use client';

import { useEffect, useState } from 'react';
import { useTheme } from 'next-themes';
import { useAtom } from 'jotai';
import { countAtom } from '@/lib/store';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import {
  Announcement,
  AnnouncementTag,
  AnnouncementTitle,
} from '@/components/ui/kibo-ui/announcement';
import { ThemeSwitcher } from '@/components/ui/kibo-ui/theme-switcher';{{
        config.database !== 'none' ? "\nimport DatabaseDemo from '@/components/database-demo';" : ''
    }}

type ThemeOption = 'light' | 'dark' | 'system';

export default function Home() {
  const { theme, setTheme } = useTheme();
  const [count, setCount] = useAtom(countAtom);
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  const currentTheme = (theme ?? 'system') as ThemeOption;

  if (!mounted) {
    return null;
  }

  return (
    <main className="min-h-screen bg-background">
      <div className="container mx-auto flex flex-col gap-10 py-16">
        <Card className="mx-auto w-full max-w-4xl border-border/60 shadow-sm">
          <CardHeader className="flex flex-col gap-4">
            <Badge variant="outline" className="self-start uppercase tracking-wide">
              fluorite-flake
            </Badge>
            <CardTitle className="text-4xl">Your shadcn/ui + Kibo UI starter</CardTitle>
            <CardDescription>
              Scaffolded with themeable components, state management, and auth-ready patterns.
            </CardDescription>
            <Announcement themed>
              <AnnouncementTag>New</AnnouncementTag>
              <AnnouncementTitle>
                Storage, auth, and deployment tooling lands out of the box.
              </AnnouncementTitle>
            </Announcement>
          </CardHeader>
          <CardContent className="grid gap-6 md:grid-cols-2">
            <div className="space-y-4">
              <ThemeSwitcher
                value={currentTheme}
                onChange={(nextValue) => setTheme(nextValue)}
              />
              <div className="flex items-center gap-3">
                <Button onClick={() => setTheme(currentTheme === 'dark' ? 'light' : 'dark')}>
                  Toggle theme
                </Button>
                <Button variant="secondary" onClick={() => setCount(count + 1)}>
                  Interactions: {count}
                </Button>
              </div>
              <p className="text-sm text-muted-foreground">
                Powered by shadcn/ui components enriched with the Kibo UI collection for product-ready
                experiences.
              </p>
            </div>
            <div className="space-y-3">
              <div className="rounded-lg border border-dashed border-border/70 p-4">
                <p className="font-medium text-foreground">Toolkit</p>
                <ul className="mt-3 space-y-1 text-sm text-muted-foreground">
                  <li>• Tailwind CSS v4 with Biome linting</li>
                  <li>• Better Auth, Jotai, next-themes integration</li>
                  <li>• Storage, database, and deployment workflows</li>
                </ul>
              </div>
              <div className="rounded-lg border border-dashed border-border/70 p-4">
                <p className="font-medium text-foreground">Next Steps</p>
                <ul className="mt-3 space-y-1 text-sm text-muted-foreground">
                  <li>• Update branding in <code>src/app/layout.tsx</code></li>
                  <li>• Customize components under <code>src/components/ui</code></li>
                  <li>• Configure environment secrets in <code>.env.local</code></li>
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>${
            config.database !== 'none'
                ? 