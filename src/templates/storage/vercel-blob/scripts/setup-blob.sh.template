#!/bin/bash
# Setup Vercel Blob Storage with automatic token retrieval

set -e

echo "🔧 Setting up Vercel Blob Storage..."

# Check if Vercel CLI is installed
if ! command -v vercel &> /dev/null; then
  echo "❌ Vercel CLI is not installed. Please install it first:"
  echo "   npm i -g vercel"
  exit 1
fi

# Check if we're in a Vercel project
if [ ! -f ".vercel/project.json" ]; then
  echo "📦 Linking to Vercel project..."
  vercel link
fi

# Get project info
PROJECT_ID=$(cat .vercel/project.json | grep '"projectId"' | cut -d'"' -f4)

if [ -z "$PROJECT_ID" ]; then
  echo "❌ Failed to get project ID. Please run 'vercel link' first."
  exit 1
fi

echo "🔍 Project ID: $PROJECT_ID"
echo "📡 Retrieving Blob store information..."

# Try to get existing blob stores
BLOB_STORES=$(vercel blob store ls 2>/dev/null || echo "")

if [ -z "$BLOB_STORES" ] || [[ "$BLOB_STORES" == *"No stores"* ]] || [[ "$BLOB_STORES" == *"Error"* ]]; then
  echo "📦 Creating new Blob store..."
  STORE_NAME="blob-$(date +%s)"
  vercel blob store add $STORE_NAME 2>/dev/null || {
    echo "⚠️ Could not create Blob store automatically."
    echo "   Please create one manually at https://vercel.com/dashboard/stores"
  }
  echo "✅ Created new Blob store: $STORE_NAME"
else
  echo "✅ Using existing Blob store"
fi

# Get the token - try multiple methods
echo "🔑 Retrieving Blob token..."

# Method 1: Try to pull from Vercel environment
vercel env pull .env.blob.temp 2>/dev/null || true
if [ -f ".env.blob.temp" ]; then
  TOKEN=$(grep BLOB_READ_WRITE_TOKEN .env.blob.temp 2>/dev/null | cut -d'=' -f2 || echo "")
  rm -f .env.blob.temp
fi

# Method 2: If no token yet, try to list stores and get the token
if [ -z "$TOKEN" ]; then
  # Try to get store details which might include the token
  STORE_OUTPUT=$(vercel blob store ls 2>/dev/null || echo "")
  # Note: Token might not be directly available through CLI
fi

if [ -z "$TOKEN" ]; then
  echo "⚠️ Could not automatically retrieve token."
  echo ""
  echo "📌 Manual setup required:"
  echo "   1. Go to: https://vercel.com/dashboard/stores"
  echo "   2. Select your Blob store (or create one if none exists)"
  echo "   3. Copy the Read/Write token"
  echo ""

  # Ask user to provide the token directly
  echo -n "Please paste your BLOB_READ_WRITE_TOKEN here: "
  read -r TOKEN

  if [ -z "$TOKEN" ]; then
    echo "❌ No token provided. Please set BLOB_READ_WRITE_TOKEN manually in .env.local"
    exit 1
  fi
fi

# Update .env.local with the token
if [ -n "$TOKEN" ]; then
  # Remove existing BLOB_READ_WRITE_TOKEN if present
  if [ -f ".env.local" ]; then
    grep -v "BLOB_READ_WRITE_TOKEN" .env.local > .env.local.tmp || true
    mv .env.local.tmp .env.local
  fi

  # Add the token
  echo "BLOB_READ_WRITE_TOKEN=$TOKEN" >> .env.local
  echo "✅ Blob token configured in .env.local"

  # Also set it in Vercel environment (using correct syntax)
  echo "$TOKEN" | vercel env add BLOB_READ_WRITE_TOKEN production --yes 2>/dev/null || true
  echo "$TOKEN" | vercel env add BLOB_READ_WRITE_TOKEN preview --yes 2>/dev/null || true
  echo "$TOKEN" | vercel env add BLOB_READ_WRITE_TOKEN development --yes 2>/dev/null || true

  echo "✅ Blob token configured in Vercel environment"
else
  echo "❌ Failed to retrieve or set Blob token"
  exit 1
fi

echo ""
echo "🎉 Vercel Blob Storage setup complete!"
echo "   Token is configured in:"
echo "   - .env.local (for local development)"
echo "   - Vercel environment (for deployments)"
echo ""
echo "📝 You can now use Blob storage in your application"