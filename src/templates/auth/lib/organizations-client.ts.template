'use client';

import { useMemo, useState, useTransition } from 'react';
import { Plus, Edit, Trash2 } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { toSlug } from '@/lib/to-slug';

function getErrorMessage(error: unknown): string {
    if (error instanceof Error) return error.message;
    if (typeof error === 'string') return error;
    if (error && typeof error === 'object' && 'message' in error) {
        return String((error as any).message);
    }
    return 'An unknown error occurred';
}

interface OrganizationMember {
    id: string;
    role: string;
    user: {
        id: string;
        email: string;
        name: string | null;
        role: string;
    };
}

interface Organization {
    id: string;
    name: string;
    slug: string;
    metadata: string | null;
    members: OrganizationMember[];
}

interface OrganizationsClientProps {
    initialOrganizations: Organization[];
}

export function OrganizationsClient({ initialOrganizations }: OrganizationsClientProps) {
    const [organizations, setOrganizations] = useState<Organization[]>(initialOrganizations);
    const [isDialogOpen, setIsDialogOpen] = useState(false);
    const [editing, setEditing] = useState<Organization | null>(null);
    const [isSlugTouched, setIsSlugTouched] = useState(false);
    const [form, setForm] = useState({
        name: '',
        slug: '',
        metadata: '{}',
    });
    const [isPending, startTransition] = useTransition();
    const [error, setError] = useState('');

    const organizationSummary = useMemo(() => {
        const memberTotal = organizations.reduce(
            (total, organization) => total + organization.members.length,
            0
        );

        return {
            count: organizations.length,
            members: memberTotal,
        };
    }, [organizations]);

    const openCreateDialog = () => {
        setEditing(null);
        setForm({ name: '', slug: '', metadata: '{}' });
        setIsSlugTouched(false);
        setError('');
        setIsDialogOpen(true);
    };

    const openEditDialog = (organization: Organization) => {
        setEditing(organization);
        setForm({
            name: organization.name,
            slug: organization.slug,
            metadata: organization.metadata ?? '{}',
        });
        setIsSlugTouched(true);
        setError('');
        setIsDialogOpen(true);
    };

    const handleNameChange = (value: string) => {
        setForm((prev) => ({
            ...prev,
            name: value,
            slug: isSlugTouched ? prev.slug : toSlug(value),
        }));
    };

    const handleSlugChange = (value: string) => {
        setIsSlugTouched(true);
        setForm((prev) => ({ ...prev, slug: value }));
    };

    const handleMetadataChange = (value: string) => {
        setForm((prev) => ({ ...prev, metadata: value }));
    };

    const handleSubmit = () => {
        startTransition(async () => {
            setError('');
            try {
                const trimmedName = form.name.trim();
                const trimmedSlug = form.slug.trim();

                if (!trimmedName || !trimmedSlug) {
                    throw new Error('組織名とスラッグは必須です。');
                }

                let metadata: unknown = undefined;
                if (form.metadata && form.metadata.trim()) {
                    try {
                        metadata = JSON.parse(form.metadata);
                    } catch (parseError) {
                        throw new Error('メタデータは有効な JSON 形式で入力してください。');
                    }
                }

                const payload = {
                    name: trimmedName,
                    slug: trimmedSlug,
                    metadata,
                };

                const endpoint = editing
                    ? `/api/organizations/${editing.id}`
                    : '/api/organizations';
                const method = editing ? 'PUT' : 'POST';

                const response = await fetch(endpoint, {
                    method,
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload),
                    credentials: 'include',
                });

                if (!response.ok) {
                    const data = await response.json().catch(() => ({}));
                    throw new Error(data.error || '組織情報の更新に失敗しました');
                }

                const data = await response.json();
                setOrganizations(data.organizations as Organization[]);
                setIsDialogOpen(false);
            } catch (err: unknown) {
                setError(getErrorMessage(err));
            }
        });
    };

    const handleDelete = (organization: Organization) => {
        if (!window.confirm(`${organization.name} を削除しますか？`)) {
            return;
        }

        startTransition(async () => {
            setError('');
            try {
                const response = await fetch(`/api/organizations/${organization.id}`, {
                    method: 'DELETE',
                    credentials: 'include',
                });

                if (!response.ok) {
                    const data = await response.json().catch(() => ({}));
                    throw new Error(data.error || '削除に失敗しました');
                }

                const data = await response.json();
                setOrganizations(data.organizations as Organization[]);
            } catch (err: unknown) {
                setError(getErrorMessage(err));
            }
        });
    };

    return (
        <div className="space-y-6">
            <Card>
                <CardHeader className="flex flex-col gap-2 md:flex-row md:items-center md:justify-between">
                    <div>
                        <CardTitle>組織一覧</CardTitle>
                        <p className="text-sm text-muted-foreground">
                            全組織 {organizationSummary.count} 件 / メンバー総数 {organizationSummary.members} 名
                        </p>
                    </div>
                    <Button onClick={openCreateDialog} className="w-full md:w-auto">
                        <Plus className="mr-2 h-4 w-4" /> 組織を追加
                    </Button>
                </CardHeader>
                <CardContent className="overflow-x-auto">
                    <Table>
                        <TableHeader>
                            <TableRow>
                                <TableHead>組織名</TableHead>
                                <TableHead>スラッグ</TableHead>
                                <TableHead>メンバー数</TableHead>
                                <TableHead>メタデータ</TableHead>
                                <TableHead className="w-[140px]">操作</TableHead>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            {organizations.map((organization) => (
                                <TableRow key={organization.id}>
                                    <TableCell className="font-medium">{organization.name}</TableCell>
                                    <TableCell>{organization.slug}</TableCell>
                                    <TableCell>{organization.members.length}</TableCell>
                                    <TableCell className="max-w-xs truncate text-sm text-muted-foreground">
                                        {organization.metadata ?? '-'}
                                    </TableCell>
                                    <TableCell className="flex gap-2" aria-label="操作">
                                        <Button
                                            variant="outline"
                                            size="icon"
                                            onClick={() => openEditDialog(organization)}
                                            disabled={isPending}
                                            aria-label={`${organization.name} を編集`}
                                        >
                                            <Edit className="h-4 w-4" />
                                        </Button>
                                        <Button
                                            variant="outline"
                                            size="icon"
                                            onClick={() => handleDelete(organization)}
                                            disabled={isPending}
                                            aria-label={`${organization.name} を削除`}
                                        >
                                            <Trash2 className="h-4 w-4" />
                                        </Button>
                                    </TableCell>
                                </TableRow>
                            ))}
                            {organizations.length === 0 && (
                                <TableRow>
                                    <TableCell colSpan={5} className="text-center text-sm text-muted-foreground">
                                        表示できる組織がありません。
                                    </TableCell>
                                </TableRow>
                            )}
                        </TableBody>
                    </Table>
                    {error && <p className="mt-4 text-sm text-destructive">{error}</p>}
                </CardContent>
            </Card>

            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
                <DialogContent className="sm:max-w-lg">
                    <DialogHeader>
                        <DialogTitle>{editing ? '組織を編集' : '組織を追加'}</DialogTitle>
                    </DialogHeader>
                    <div className="space-y-4">
                        <div className="space-y-2">
                            <label htmlFor="organization-name" className="text-sm font-medium">
                                組織名
                            </label>
                            <Input
                                id="organization-name"
                                value={form.name}
                                onChange={(event) => handleNameChange(event.target.value)}
                                placeholder="フロライト株式会社"
                            />
                        </div>
                        <div className="space-y-2">
                            <label htmlFor="organization-slug" className="text-sm font-medium">
                                スラッグ
                            </label>
                            <Input
                                id="organization-slug"
                                value={form.slug}
                                onChange={(event) => handleSlugChange(event.target.value)}
                                placeholder="fluorite"
                            />
                            <p className="text-xs text-muted-foreground">URL 等で利用される識別子です。英数字とハイフンのみ推奨。</p>
                        </div>
                        <div className="space-y-2">
                            <label htmlFor="organization-metadata" className="text-sm font-medium">
                                メタデータ (JSON)
                            </label>
                            <Textarea
                                id="organization-metadata"
                                value={form.metadata}
                                onChange={(event) => handleMetadataChange(event.target.value)}
                                className="min-h-[120px]"
                                placeholder='{"tier":"gold"}'
                            />
                        </div>
                    </div>
                    {error && <p className="text-sm text-destructive">{error}</p>}
                    <DialogFooter>
                        <Button variant="outline" onClick={() => setIsDialogOpen(false)} disabled={isPending}>
                            キャンセル
                        </Button>
                        <Button onClick={handleSubmit} disabled={isPending}>
                            {editing ? '更新する' : '登録する'}
                        </Button>
                    </DialogFooter>
                </DialogContent>
            </Dialog>
        </div>
    );
}
