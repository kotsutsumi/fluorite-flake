'use client';

import { useMemo, useState, useTransition } from 'react';
import { Plus, Edit, Trash2 } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';

function getErrorMessage(error: unknown): string {
  if (error instanceof Error) return error.message;
  if (typeof error === 'string') return error;
  if (error && typeof error === 'object' && 'message' in error) {
    return String((error as any).message);
  }
  return 'An unknown error occurred';
}

interface OrganizationMember {
  id: string;
  role: string;
  user: {
    id: string;
    email: string;
    name: string | null;
    role: string;
  };
}

interface Organization {
  id: string;
  name: string;
  slug: string;
  metadata: string | null; // JSON stored as string for SQLite compatibility
  members: OrganizationMember[];
}

interface OrganizationsClientProps {
  initialOrganizations: Organization[];
}

export function OrganizationsClient({ initialOrganizations }: OrganizationsClientProps) {
  const [organizations, setOrganizations] = useState<Organization[]>(initialOrganizations);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [editing, setEditing] = useState<Organization | null>(null);
  const [form, setForm] = useState({
    name: '',
    slug: '',
    metadata: '{}', // Initialize with empty JSON string
  });
  const [isPending, startTransition] = useTransition();
  const [error, setError] = useState('');

  const memberCount = useMemo(
    () => organizations.reduce((acc, organization) => acc + organization.members.length, 0),
    [organizations]
  );

  const openCreateDialog = () => {
    setEditing(null);
    setForm({ name: '', slug: '', metadata: '{}' });
    setError('');
    setIsDialogOpen(true);
  };

  const openEditDialog = (organization: Organization) => {
    setEditing(organization);
    setForm({
      name: organization.name,
      slug: organization.slug,
      metadata: organization.metadata || '{}',
    });
    setError('');
    setIsDialogOpen(true);
  };

  const handleSubmit = () => {
    startTransition(async () => {
      setError('');
      try {
        const payload = {
          name: form.name,
          slug: form.slug,
          metadata: form.metadata ? JSON.parse(form.metadata) : undefined,
        };

        const response = await fetch(editing ? \