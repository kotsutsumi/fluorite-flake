import { NextResponse } from 'next/server';
import { headers } from 'next/headers';
import bcrypt from 'bcryptjs';
import prisma from '@/lib/db';
import { auth } from '@/lib/auth';
import { saveProfileImage } from '@/lib/profile-upload';

export const runtime = 'nodejs';

export async function PUT(request: Request) {
    const session = await auth.api.getSession({ headers: await headers() });

    if (!session) {
        return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const formData = await request.formData();
    const name = formData.get('name')?.toString().trim();
    const password = formData.get('password')?.toString();
    const avatar = formData.get('avatar');

    const updateData: Record<string, unknown> = {};

    if (name) {
        updateData.name = name;
    }

    if (avatar instanceof File && avatar.size > 0) {
        const imageUrl = await saveProfileImage(avatar, session.user.id);
        updateData.image = imageUrl;
    }

    if (Object.keys(updateData).length > 0) {
        await prisma.user.update({
            where: { id: session.user.id },
            data: updateData,
        });
    }

    if (password) {
        if (password.length < 8) {
            return NextResponse.json({ error: 'パスワードは8文字以上で入力してください。' }, { status: 400 });
        }

        const hashed = await bcrypt.hash(password, 12);
        const existingAccount = await prisma.account.findFirst({
            where: {
                userId: session.user.id,
                providerId: 'email-password',
            },
        });

        if (existingAccount) {
            await prisma.account.update({
                where: { id: existingAccount.id },
                data: { password: hashed },
            });
        } else {
            await prisma.account.create({
                data: {
                    userId: session.user.id,
                    providerId: 'email-password',
                    accountId: session.user.email ?? session.user.id,
                    password: hashed,
                },
            });
        }
    }

    const refreshedUser = await prisma.user.findUnique({
        where: { id: session.user.id },
        select: {
            name: true,
            image: true,
            role: true,
        },
    });

    return NextResponse.json({
        success: true,
        imageUrl: refreshedUser?.image ?? null,
    });
}
