import { NextResponse } from 'next/server';
import bcrypt from 'bcryptjs';
import prisma from '@/lib/db';
import { getApiSession } from '@/lib/getApiSession';
import { APP_ROLES } from '@/lib/roles';

export const runtime = 'nodejs';

export async function DELETE(request: Request, { params }: { params: { id: string } }) {
    const session = await getApiSession(request);

    if (!session) {
        return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const role = session.user.role as string;
    if (role !== APP_ROLES.ADMIN && role !== APP_ROLES.ORG_ADMIN) {
        return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
    }

    if (session.user.id === params.id) {
        return NextResponse.json({ error: '自分自身を削除することはできません。' }, { status: 400 });
    }

    if (role === APP_ROLES.ORG_ADMIN) {
        const organizations = await prisma.member.findMany({
            where: { userId: session.user.id },
            select: { organizationId: true },
        });
        const organizationIds = organizations.map((membership) => membership.organizationId);

        const targetMember = await prisma.member.findFirst({
            where: {
                userId: params.id,
                organizationId: { in: organizationIds },
            },
        });

        if (!targetMember) {
            return NextResponse.json({ error: '許可されていない操作です。' }, { status: 403 });
        }
    }

    await prisma.member.deleteMany({ where: { userId: params.id } });
    await prisma.account.deleteMany({ where: { userId: params.id } });
    await prisma.session.deleteMany({ where: { userId: params.id } });
    await prisma.user.delete({ where: { id: params.id } });

    const users = await prisma.user.findMany({
        where:
            role === APP_ROLES.ADMIN
                ? undefined
                : {
                      memberships: {
                          some: {
                              organizationId: {
                                  in: await prisma.member
                                      .findMany({
                                          where: { userId: session.user.id },
                                          select: { organizationId: true },
                                      })
                                      .then((memberships) =>
                                          memberships.map((membership) => membership.organizationId)
                                      ),
                              },
                          },
                      },
                  },
        include: {
            memberships: {
                include: {
                    organization: {
                        select: { id: true, name: true, slug: true },
                    },
                },
            },
        },
        orderBy: { createdAt: 'desc' },
    });

    return NextResponse.json({ users });
}

export async function PATCH(request: Request, { params }: { params: { id: string } }) {
    const session = await getApiSession(request);

    if (!session) {
        return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const role = session.user.role as string;
    if (role !== APP_ROLES.ADMIN && role !== APP_ROLES.ORG_ADMIN) {
        return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
    }

    const payload = await request.json();
    const targetRole = String(payload.role ?? APP_ROLES.USER);
    const organizationId = String(payload.organizationId ?? '');

    if (role === APP_ROLES.ORG_ADMIN && targetRole === APP_ROLES.ADMIN) {
        return NextResponse.json(
            { error: '組織管理ユーザーは管理ユーザーを設定できません。' },
            { status: 400 }
        );
    }

    await prisma.user.update({
        where: { id: params.id },
        data: {
            role: targetRole,
            memberships: {
                deleteMany: {},
                ...(organizationId
                    ? {
                          create: {
                              organizationId,
                              role: targetRole,
                          },
                      }
                    : {}),
            },
        },
    });

    const users = await prisma.user.findMany({
        where:
            role === APP_ROLES.ADMIN
                ? undefined
                : {
                      memberships: {
                          some: {
                              organizationId: {
                                  in: await prisma.member
                                      .findMany({
                                          where: { userId: session.user.id },
                                          select: { organizationId: true },
                                      })
                                      .then((memberships) =>
                                          memberships.map((membership) => membership.organizationId)
                                      ),
                              },
                          },
                      },
                  },
        include: {
            memberships: {
                include: {
                    organization: {
                        select: { id: true, name: true, slug: true },
                    },
                },
            },
        },
        orderBy: { createdAt: 'desc' },
    });

    return NextResponse.json({ users });
}
