import { NextResponse } from 'next/server';
import { headers } from 'next/headers';
import prisma from '@/lib/db';
import { auth } from '@/lib/auth';
import { APP_ROLES } from '@/lib/roles';
import { toSlug } from '@/lib/to-slug';

export const runtime = 'nodejs';

export async function GET() {
    const session = await auth.api.getSession({ headers: await headers() });

    if (!session) {
        return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const organizations = await prisma.organization.findMany({
        include: {
            members: {
                include: {
                    user: {
                        select: { id: true, email: true, name: true, role: true },
                    },
                },
            },
        },
        orderBy: { createdAt: 'desc' },
    });

    return NextResponse.json({ organizations });
}

export async function POST(request: Request) {
    const session = await auth.api.getSession({ headers: await headers() });

    if (!session || session.user.role !== APP_ROLES.ADMIN) {
        return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
    }

    const payload = await request.json();
    const name = String(payload.name ?? '').trim();
    const slug = String(payload.slug ?? '') || toSlug(name);

    if (!name) {
        return NextResponse.json({ error: '組織名は必須です。' }, { status: 400 });
    }

    const metadata =
        payload.metadata && typeof payload.metadata === 'object'
            ? JSON.stringify(payload.metadata)
            : undefined;

    await prisma.organization.create({
        data: {
            name,
            slug,
            metadata,
        },
    });

    const organizations = await prisma.organization.findMany({
        include: {
            members: {
                include: {
                    user: {
                        select: { id: true, email: true, name: true, role: true },
                    },
                },
            },
        },
        orderBy: { createdAt: 'desc' },
    });

    return NextResponse.json({ organizations });
}
