'use client';

import { useTransition } from 'react';
import { useRouter } from 'next/navigation';
import { LogOut } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { ROLE_LABELS, type AppRole } from '@/lib/roles';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';

interface DashboardHeaderProps {
  user: {
    id: string;
    email: string;
    name: string;
    role: AppRole | string;
  };
}

export function DashboardHeader({ user }: DashboardHeaderProps) {
  const [isPending, startTransition] = useTransition();
  const router = useRouter();
  const initials = user.name
    ? user.name
        .split(' ')
        .map((part) => part.charAt(0))
        .join('')
        .slice(0, 2)
        .toUpperCase()
    : user.email.slice(0, 2).toUpperCase();

  const handleSignOut = () => {
    startTransition(async () => {
      try {
        console.log('🚪 Starting custom logout process');
        const response = await fetch('/api/auth/sign-out', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
        });

        if (response.ok) {
          console.log('✅ Logout successful, redirecting to login');
          router.push('/login');
          router.refresh(); // Force refresh to clear any cached data
        } else {
          console.error('❌ Logout failed:', response.status);
        }
      } catch (error) {
        console.error('💥 Logout error:', error);
      }
    });
  };

  return (
    <header className="flex items-center justify-between border-b bg-background/60 px-6 py-4">
      <div>
        <h1 className="text-2xl font-semibold">fluorite-flake ダッシュボード</h1>
        <p className="text-sm text-muted-foreground">
          {ROLE_LABELS[(user.role as AppRole) ?? 'user'] || '一般ユーザー'} / {user.email}
        </p>
      </div>
      <div className="flex items-center gap-4">
        <Avatar className="h-10 w-10">
          <AvatarFallback>{initials}</AvatarFallback>
        </Avatar>
        <Button variant="outline" size="sm" onClick={handleSignOut} disabled={isPending}>
          <LogOut className="mr-2 h-4 w-4" />
          ログアウト
        </Button>
      </div>
    </header>
  );
}
