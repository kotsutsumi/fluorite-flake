'use client';

import { useSearchParams, useRouter } from 'next/navigation';
import { useEffect, useState, useTransition } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { signIn } from '@/lib/auth-client';

function getErrorMessage(error: unknown): string {
  if (error instanceof Error) return error.message;
  if (typeof error === 'string') return error;
  if (error && typeof error === 'object' && 'message' in error) {
    return String((error as any).message);
  }
  return 'An unknown error occurred';
}

const TEST_ACCOUNTS = [
  { label: '管理ユーザー', email: 'admin@example.com', password: 'Admin123!' },
  { label: '組織管理ユーザー', email: 'orgadmin@example.com', password: 'OrgAdmin123!' },
  { label: '一般ユーザー', email: 'user@example.com', password: 'User123!' },
];

export default function LoginPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [email, setEmail] = useState('admin@example.com');
  const [password, setPassword] = useState('Admin123!');
  const [status, setStatus] = useState<{ type: 'error'; message: string } | null>(null);
  const [isPending, startTransition] = useTransition();

  useEffect(() => {
    const prefill = searchParams.get('prefill');
    if (prefill) {
      const candidate = TEST_ACCOUNTS.find((account) => account.email === prefill);
      if (candidate) {
        setEmail(candidate.email);
        setPassword(candidate.password);
      }
    }
  }, [searchParams]);

  const handlePrefill = (account: { email: string; password: string }) => {
    setEmail(account.email);
    setPassword(account.password);
    setStatus(null);
  };

  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setStatus(null);
    const redirectTo = searchParams.get('redirect') ?? '/';

    startTransition(async () => {
      try {
        // カスタムAPIエンドポイントを直接呼び出す
        const response = await fetch('/api/auth/sign-in/email', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          credentials: 'include',
          body: JSON.stringify({
            email,
            password,
          }),
        });

        const result = await response.json();

        if (!response.ok || result.error) {
          throw new Error(result.error?.message || 'ログインに失敗しました');
        }

        // ログイン成功後、リダイレクト
        router.push(redirectTo);
        router.refresh(); // ルーターキャッシュを更新
      } catch (err: unknown) {
        setStatus({ type: 'error', message: getErrorMessage(err) || 'ログインに失敗しました' });
      }
    });
  };

  return (
    <div className="flex min-h-screen items-center justify-center bg-muted/30 px-4">
      <Card className="w-full max-w-md">
        <CardHeader className="space-y-2 text-center">
          <CardTitle className="text-2xl">fluorite-flake ログイン</CardTitle>
          <CardDescription>サンプルアカウントでログインするか、独自の資格情報を入力してください。</CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="grid grid-cols-1 gap-2">
            {TEST_ACCOUNTS.map((account) => (
              <Button key={account.email} variant="outline" onClick={() => handlePrefill(account)}>
                {account.label}としてログイン情報を入力
              </Button>
            ))}
          </div>
          <form className="space-y-4" onSubmit={handleSubmit}>
            <div className="space-y-2">
              <Label htmlFor="email">メールアドレス</Label>
              <Input
                id="email"
                type="email"
                value={email}
                onChange={(event) => setEmail(event.target.value)}
                placeholder="you@example.com"
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="password">パスワード</Label>
              <Input
                id="password"
                type="password"
                value={password}
                onChange={(event) => setPassword(event.target.value)}
                placeholder="********"
                required
              />
            </div>
            {status && (
              <Alert variant="destructive">
                <AlertDescription>{status.message}</AlertDescription>
              </Alert>
            )}
            <Button type="submit" className="w-full" disabled={isPending}>
              ログイン
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  );
}
