import path from 'node:path';
import fs from 'fs-extra';

import type { ProjectConfig } from '../commands/create/types.js';

export async function generateFlutterProject(config: ProjectConfig) {
    // Create project directory
    await fs.ensureDir(config.projectPath);

    // Create Flutter app structure
    await createFlutterAppStructure(config);

    // Setup pubspec.yaml
    await generatePubspecYaml(config);

    // Setup analysis options
    await setupAnalysisOptions(config);

    // Create main Flutter app files
    await createFlutterApp(config);

    // Setup .gitignore
    await createFlutterGitignore(config);

    // Create README with instructions
    await createFlutterReadme(config);

    // Setup Patrol E2E testing
    await setupPatrolTesting(config);
}

async function createFlutterAppStructure(config: ProjectConfig) {
    const dirs = [
        'lib',
        'lib/screens',
        'lib/widgets',
        'lib/models',
        'lib/services',
        'lib/utils',
        'lib/constants',
        'test',
        'assets',
        'assets/images',
        'assets/fonts',
        'android',
        `android/app/src/main/kotlin/com/example/${config.projectName.toLowerCase()}`,
        'ios',
        'ios/Runner',
        'web',
        'linux',
        'macos',
        'windows',
    ];

    for (const dir of dirs) {
        await fs.ensureDir(path.join(config.projectPath, dir));
    }
}

async function generatePubspecYaml(config: ProjectConfig) {
    const pubspec = `name: ${config.projectName.toLowerCase().replace(/-/g, '_')}
description: "A new Flutter project generated by fluorite-flake."
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

version: 1.0.0+1

environment:
  sdk: '>=3.2.0 <4.0.0'

dependencies:
  flutter:
    sdk: flutter

  # State management
  provider: ^6.1.1

  # Routing
  go_router: ^14.6.2

  # UI components
  cupertino_icons: ^1.0.8

  # HTTP client
  http: ^1.2.0

  # Local storage
  shared_preferences: ^2.3.2

dev_dependencies:
  flutter_test:
    sdk: flutter

  # Linting
  flutter_lints: ^4.0.0

  # Testing utilities
  mockito: ^5.4.4

flutter:
  uses-material-design: true

  assets:
    - assets/images/
    - assets/fonts/

  # fonts:
  #   - family: CustomFont
  #     fonts:
  #       - asset: assets/fonts/CustomFont-Regular.ttf
  #       - asset: assets/fonts/CustomFont-Bold.ttf
  #         weight: 700
`;

    await fs.writeFile(path.join(config.projectPath, 'pubspec.yaml'), pubspec);
}

async function setupAnalysisOptions(config: ProjectConfig) {
    const analysisOptions = `# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running \`flutter analyze\`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the \`package:flutter_lints/flutter.yaml\`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the \`// ignore: name_of_lint\` and
  # \`// ignore_for_file: name_of_lint\` syntax on the line or in the file
  # producing the lint.
  rules:
    prefer_single_quotes: true
    require_trailing_commas: true
    sort_child_properties_last: true
`;

    await fs.writeFile(path.join(config.projectPath, 'analysis_options.yaml'), analysisOptions);
}

async function createFlutterApp(config: ProjectConfig) {
    // main.dart
    const mainDart = `import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:go_router/go_router.dart';
import 'screens/home_screen.dart';
import 'screens/settings_screen.dart';
import 'services/theme_service.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  MyApp({super.key});

  final GoRouter _router = GoRouter(
    routes: [
      GoRoute(
        path: '/',
        builder: (context, state) => const HomeScreen(),
      ),
      GoRoute(
        path: '/settings',
        builder: (context, state) => const SettingsScreen(),
      ),
    ],
  );

  @override
  Widget build(BuildContext context) {
    return ChangeNotifierProvider(
      create: (context) => ThemeService(),
      child: Consumer<ThemeService>(
        builder: (context, themeService, child) {
          return MaterialApp.router(
            title: '${config.projectName}',
            theme: ThemeData(
              colorScheme: ColorScheme.fromSeed(
                seedColor: Colors.deepPurple,
                brightness: themeService.isDarkMode
                  ? Brightness.dark
                  : Brightness.light,
              ),
              useMaterial3: true,
            ),
            routerConfig: _router,
          );
        },
      ),
    );
  }
}
`;

    await fs.writeFile(path.join(config.projectPath, 'lib/main.dart'), mainDart);

    // Home screen
    const homeScreenDart = `import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import '../services/theme_service.dart';
import '../widgets/feature_card.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  int _counter = 0;

  void _incrementCounter() {
    setState(() {
      _counter++;
    });
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Scaffold(
      appBar: AppBar(
        backgroundColor: theme.colorScheme.inversePrimary,
        title: Text('${config.projectName}'),
        actions: [
          IconButton(
            icon: const Icon(Icons.settings),
            onPressed: () => context.go('/settings'),
          ),
        ],
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Card(
              child: Padding(
                padding: const EdgeInsets.all(24.0),
                child: Column(
                  children: [
                    Icon(
                      Icons.flutter_dash,
                      size: 64,
                      color: theme.colorScheme.primary,
                    ),
                    const SizedBox(height: 16),
                    Text(
                      'Welcome to ${config.projectName}!',
                      style: theme.textTheme.headlineSmall,
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'Built with Flutter',
                      style: theme.textTheme.bodyLarge?.copyWith(
                        color: theme.colorScheme.onSurfaceVariant,
                      ),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 24),
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  children: [
                    Text(
                      'You have pushed the button this many times:',
                      style: theme.textTheme.bodyLarge,
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: 8),
                    Text(
                      '$_counter',
                      style: theme.textTheme.headlineMedium?.copyWith(
                        color: theme.colorScheme.primary,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 24),
            const Text(
              'âœ¨ Features',
              style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 16),
            const FeatureCard(
              icon: Icons.phone_android,
              title: 'Cross-platform',
              description: 'Runs on iOS, Android, Web, and Desktop',
            ),
            const FeatureCard(
              icon: Icons.palette,
              title: 'Material Design 3',
              description: 'Modern UI with dynamic theming',
            ),
            const FeatureCard(
              icon: Icons.navigation,
              title: 'Go Router',
              description: 'Declarative routing with URL support',
            ),
            const FeatureCard(
              icon: Icons.storage,
              title: 'State Management',
              description: 'Provider pattern for reactive state',
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: const Icon(Icons.add),
      ),
    );
  }
}
`;

    await fs.writeFile(
        path.join(config.projectPath, 'lib/screens/home_screen.dart'),
        homeScreenDart
    );

    // Settings screen
    const settingsScreenDart = `import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:go_router/go_router.dart';
import '../services/theme_service.dart';

class SettingsScreen extends StatelessWidget {
  const SettingsScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Settings'),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => context.go('/'),
        ),
      ),
      body: ListView(
        children: [
          Consumer<ThemeService>(
            builder: (context, themeService, child) {
              return SwitchListTile(
                title: const Text('Dark Mode'),
                subtitle: const Text('Toggle between light and dark themes'),
                value: themeService.isDarkMode,
                onChanged: (value) {
                  themeService.toggleTheme();
                },
                secondary: Icon(
                  themeService.isDarkMode
                    ? Icons.dark_mode
                    : Icons.light_mode,
                ),
              );
            },
          ),
          const Divider(),
          ListTile(
            leading: const Icon(Icons.info),
            title: const Text('About'),
            subtitle: const Text('Learn more about this app'),
            trailing: const Icon(Icons.arrow_forward_ios),
            onTap: () {
              showAboutDialog(
                context: context,
                applicationName: '${config.projectName}',
                applicationVersion: '1.0.0',
                applicationIcon: const Icon(Icons.flutter_dash),
                children: [
                  const Text('Built with Flutter'),
                  const SizedBox(height: 8),
                  const Text('Generated by fluorite-flake'),
                ],
              );
            },
          ),
          ListTile(
            leading: const Icon(Icons.code),
            title: const Text('Development Commands'),
            subtitle: const Text('View available Flutter commands'),
            trailing: const Icon(Icons.arrow_forward_ios),
            onTap: () {
              showDialog(
                context: context,
                builder: (context) => AlertDialog(
                  title: const Text('Development Commands'),
                  content: const SingleChildScrollView(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Text('flutter run'),
                        Text('â€¢ Start development server'),
                        SizedBox(height: 8),
                        Text('flutter run -d chrome'),
                        Text('â€¢ Run in web browser'),
                        SizedBox(height: 8),
                        Text('flutter build apk'),
                        Text('â€¢ Build Android APK'),
                        SizedBox(height: 8),
                        Text('flutter build ios'),
                        Text('â€¢ Build iOS app'),
                        SizedBox(height: 8),
                        Text('flutter test'),
                        Text('â€¢ Run tests'),
                      ],
                    ),
                  ),
                  actions: [
                    TextButton(
                      onPressed: () => Navigator.of(context).pop(),
                      child: const Text('Close'),
                    ),
                  ],
                ),
              );
            },
          ),
        ],
      ),
    );
  }
}
`;

    await fs.writeFile(
        path.join(config.projectPath, 'lib/screens/settings_screen.dart'),
        settingsScreenDart
    );

    // Theme service
    const themeServiceDart = `import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

class ThemeService extends ChangeNotifier {
  static const String _themeKey = 'isDarkMode';
  bool _isDarkMode = false;

  bool get isDarkMode => _isDarkMode;

  ThemeService() {
    _loadTheme();
  }

  Future<void> _loadTheme() async {
    final prefs = await SharedPreferences.getInstance();
    _isDarkMode = prefs.getBool(_themeKey) ?? false;
    notifyListeners();
  }

  Future<void> toggleTheme() async {
    _isDarkMode = !_isDarkMode;
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(_themeKey, _isDarkMode);
    notifyListeners();
  }

  Future<void> setTheme(bool isDark) async {
    _isDarkMode = isDark;
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(_themeKey, _isDarkMode);
    notifyListeners();
  }
}
`;

    await fs.writeFile(
        path.join(config.projectPath, 'lib/services/theme_service.dart'),
        themeServiceDart
    );

    // Feature card widget
    const featureCardDart = `import 'package:flutter/material.dart';

class FeatureCard extends StatelessWidget {
  final IconData icon;
  final String title;
  final String description;

  const FeatureCard({
    super.key,
    required this.icon,
    required this.title,
    required this.description,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Card(
      margin: const EdgeInsets.only(bottom: 8.0),
      child: ListTile(
        leading: Icon(
          icon,
          color: theme.colorScheme.primary,
        ),
        title: Text(
          title,
          style: theme.textTheme.titleMedium?.copyWith(
            fontWeight: FontWeight.w600,
          ),
        ),
        subtitle: Text(description),
      ),
    );
  }
}
`;

    await fs.writeFile(
        path.join(config.projectPath, 'lib/widgets/feature_card.dart'),
        featureCardDart
    );

    // Create navigation service
    const navigationServiceDart = `import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';

class NavigationService {
  static final NavigationService _instance = NavigationService._internal();
  factory NavigationService() => _instance;
  NavigationService._internal();

  void navigateTo(BuildContext context, String route, {Object? extra}) {
    context.go(route, extra: extra);
  }

  void navigateBack(BuildContext context) {
    if (context.canPop()) {
      context.pop();
    } else {
      context.go('/');
    }
  }

  void replaceWith(BuildContext context, String route, {Object? extra}) {
    context.pushReplacement(route, extra: extra);
  }
}
`;

    await fs.writeFile(
        path.join(config.projectPath, 'lib/services/navigation_service.dart'),
        navigationServiceDart
    );

    // Create app state model
    const appStateDart = `import 'package:flutter/foundation.dart';

class AppState extends ChangeNotifier {
  bool _isLoading = false;
  String? _error;
  Map<String, dynamic> _data = {};

  bool get isLoading => _isLoading;
  String? get error => _error;
  Map<String, dynamic> get data => _data;

  void setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  void setError(String? error) {
    _error = error;
    notifyListeners();
  }

  void setData(String key, dynamic value) {
    _data[key] = value;
    notifyListeners();
  }

  dynamic getData(String key) => _data[key];

  void clearError() {
    _error = null;
    notifyListeners();
  }

  void reset() {
    _isLoading = false;
    _error = null;
    _data = {};
    notifyListeners();
  }
}
`;

    await fs.writeFile(path.join(config.projectPath, 'lib/models/app_state.dart'), appStateDart);

    // Create constants file
    const constantsDart = `import 'package:flutter/material.dart';

class AppConstants {
  // App Info
  static const String appName = '${config.projectName}';
  static const String appVersion = '1.0.0';

  // Colors
  static const Color primaryColor = Colors.deepPurple;
  static const Color accentColor = Colors.deepPurpleAccent;
  static const Color backgroundColor = Colors.white;
  static const Color darkBackgroundColor = Color(0xFF121212);

  // Spacing
  static const double defaultPadding = 16.0;
  static const double smallPadding = 8.0;
  static const double largePadding = 24.0;

  // Border Radius
  static const double defaultRadius = 8.0;
  static const double smallRadius = 4.0;
  static const double largeRadius = 16.0;

  // Animation Durations
  static const Duration shortAnimation = Duration(milliseconds: 200);
  static const Duration mediumAnimation = Duration(milliseconds: 400);
  static const Duration longAnimation = Duration(milliseconds: 600);

  // API Configuration (if needed)
  static const String apiBaseUrl = 'https://api.example.com';
  static const Duration apiTimeout = Duration(seconds: 30);
}
`;

    await fs.writeFile(path.join(config.projectPath, 'lib/utils/constants.dart'), constantsDart);

    // Test file
    const testFile = `import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:${config.projectName.toLowerCase().replace(/-/g, '_')}/main.dart';

void main() {
  testWidgets('Counter increments smoke test', (WidgetTester tester) async {
    // Build our app and trigger a frame.
    await tester.pumpWidget(MyApp());

    // Verify that our counter starts at 0.
    expect(find.text('0'), findsOneWidget);
    expect(find.text('1'), findsNothing);

    // Tap the '+' icon and trigger a frame.
    await tester.tap(find.byIcon(Icons.add));
    await tester.pump();

    // Verify that our counter has incremented.
    expect(find.text('0'), findsNothing);
    expect(find.text('1'), findsOneWidget);
  });

  testWidgets('Navigation to settings works', (WidgetTester tester) async {
    await tester.pumpWidget(MyApp());

    // Find and tap the settings button
    await tester.tap(find.byIcon(Icons.settings));
    await tester.pumpAndSettle();

    // Verify that we navigated to the settings screen
    expect(find.text('Settings'), findsOneWidget);
    expect(find.text('Dark Mode'), findsOneWidget);
  });
}
`;

    await fs.writeFile(path.join(config.projectPath, 'test/widget_test.dart'), testFile);

    // Create .gitkeep in images directory
    await fs.writeFile(path.join(config.projectPath, 'assets/images/.gitkeep'), '');

    // Assets readme
    const assetsReadme = `# Assets

## Images
Place your images in this directory and reference them in pubspec.yaml under the assets section.

## Fonts
Add custom fonts here and configure them in pubspec.yaml under the fonts section.

## Example Usage
\`\`\`dart
// For images
Image.asset('assets/images/logo.png')

// For custom fonts (configure in pubspec.yaml first)
Text(
  'Hello',
  style: TextStyle(fontFamily: 'CustomFont'),
)
\`\`\`
`;

    await fs.writeFile(path.join(config.projectPath, 'assets/README.md'), assetsReadme);
}

async function createFlutterGitignore(config: ProjectConfig) {
    const gitignoreContent = `# Miscellaneous
*.class
*.log
*.pyc
*.swp
.DS_Store
.atom/
.buildlog/
.history
.svn/
migrate_working_dir/

# IntelliJ related
*.iml
*.ipr
*.iws
.idea/

# The .vscode folder contains launch configuration and tasks you configure in
# VS Code which you may wish to be included in version control, so this line
# is commented out by default.
#.vscode/

# Flutter/Dart/Pub related
**/doc/api/
**/ios/Flutter/.last_build_id
.dart_tool/
.flutter-plugins
.flutter-plugins-dependencies
.packages
.pub-cache/
.pub/
/build/

# Symbolication related
app.*.symbols

# Obfuscation related
app.*.map.json

# Android Studio will place build artifacts here
/android/app/debug
/android/app/profile
/android/app/release
`;

    await fs.writeFile(path.join(config.projectPath, '.gitignore'), gitignoreContent);
}

async function createFlutterReadme(config: ProjectConfig) {
    const readmeContent = `# ${config.projectName}

A Flutter application generated by fluorite-flake.

## Getting Started

This project is a starting point for a Flutter application with the following features:

- âœ¨ Material Design 3 with dynamic theming
- ðŸŽ¨ Dark/Light mode support with persistence
- ðŸš€ Go Router for navigation
- ðŸ“± Cross-platform support (iOS, Android, Web, Desktop)
- ðŸ”§ Provider pattern for state management
- ðŸ§ª Unit and widget testing setup

## Prerequisites

Before running this project, ensure you have:

1. **Flutter SDK**: Install from [flutter.dev](https://flutter.dev/docs/get-started/install)
2. **Development Environment**:
   - For Android: Android Studio with Android SDK
   - For iOS: Xcode (macOS only)
   - For Web: Chrome browser
   - For Desktop: Platform-specific requirements

## Development Commands

### Running the App

\`\`\`bash
# Get dependencies
flutter pub get

# Run on connected device/emulator
flutter run

# Run on specific platforms
flutter run -d chrome          # Web
flutter run -d macos           # macOS (macOS only)
flutter run -d windows         # Windows (Windows only)
flutter run -d linux           # Linux (Linux only)
\`\`\`

### Building for Production

\`\`\`bash
# Android
flutter build apk              # Debug APK
flutter build apk --release    # Release APK
flutter build appbundle        # App Bundle for Play Store

# iOS (macOS only)
flutter build ios

# Web
flutter build web

# Desktop
flutter build macos            # macOS (macOS only)
flutter build windows          # Windows (Windows only)
flutter build linux            # Linux (Linux only)
\`\`\`

### Testing and Analysis

\`\`\`bash
# Run tests
flutter test

# Analyze code
flutter analyze

# Format code
dart format .

# Check for outdated dependencies
flutter pub outdated
\`\`\`

## Project Structure

\`\`\`
lib/
â”œâ”€â”€ main.dart              # App entry point
â”œâ”€â”€ screens/               # Screen widgets
â”‚   â”œâ”€â”€ home_screen.dart
â”‚   â””â”€â”€ settings_screen.dart
â”œâ”€â”€ widgets/               # Reusable widgets
â”‚   â””â”€â”€ feature_card.dart
â”œâ”€â”€ services/              # Business logic and services
â”‚   â””â”€â”€ theme_service.dart
â”œâ”€â”€ models/                # Data models
â””â”€â”€ utils/                 # Utility functions

test/                      # Test files
assets/                    # Images, fonts, etc.
\`\`\`

## Features

### Theme Management
- Toggle between light and dark modes
- Persistent theme selection using SharedPreferences
- Material Design 3 dynamic color system

### Navigation
- Declarative routing with go_router
- URL-based navigation (great for web)
- Type-safe route management

### State Management
- Provider pattern for reactive state
- Separation of UI and business logic
- Easy testing and maintainability

## Adding Dependencies

Add new dependencies to \`pubspec.yaml\`:

\`\`\`yaml
dependencies:
  flutter:
    sdk: flutter
  your_package: ^version
\`\`\`

Then run:
\`\`\`bash
flutter pub get
\`\`\`

## Contributing

1. Follow the [Dart style guide](https://dart.dev/guides/language/effective-dart/style)
2. Run \`flutter analyze\` before committing
3. Write tests for new features
4. Update documentation as needed

## Learn More

- [Flutter Documentation](https://docs.flutter.dev/)
- [Dart Language](https://dart.dev/)
- [Material Design](https://material.io/)
- [Go Router Package](https://pub.dev/packages/go_router)
- [Provider Package](https://pub.dev/packages/provider)
`;

    await fs.writeFile(path.join(config.projectPath, 'README.md'), readmeContent);
}

async function setupPatrolTesting(config: ProjectConfig) {
    // Create integration_test directory
    const integrationTestDir = path.join(config.projectPath, 'integration_test');
    await fs.ensureDir(integrationTestDir);

    // Update pubspec.yaml with Patrol dependencies
    const pubspecPath = path.join(config.projectPath, 'pubspec.yaml');
    const pubspecContent = await fs.readFile(pubspecPath, 'utf-8');

    // Add Patrol dependencies to dev_dependencies
    const updatedPubspec = pubspecContent
        .replace(
            'dev_dependencies:',
            `dev_dependencies:
  # Patrol E2E Testing
  patrol: ^3.13.0
  patrol_devtools_extension: ^2.0.0`
        )
        .replace(
            'flutter_test:',
            `integration_test:
    sdk: flutter
  flutter_test:`
        );

    await fs.writeFile(pubspecPath, updatedPubspec);

    // Create patrol directory
    const patrolDir = path.join(config.projectPath, 'patrol');
    await fs.ensureDir(patrolDir);

    // Create Patrol README
    const patrolReadme = `# Patrol E2E Testing

Patrol is a powerful E2E testing framework for Flutter apps with native automation support.

## Installation

### Install Patrol CLI
\`\`\`bash
# macOS/Linux
curl -fsSL https://raw.githubusercontent.com/patrol-for-flutter/patrol-cli/main/install.sh | bash

# Or with Homebrew
brew install patrol

# Windows (PowerShell as Administrator)
Invoke-WebRequest -Uri https://raw.githubusercontent.com/patrol-for-flutter/patrol-cli/main/install.ps1 -UseBasicParsing | Invoke-Expression
\`\`\`

### Setup Patrol in Project
\`\`\`bash
# Bootstrap Patrol (one-time setup)
patrol bootstrap

# This will:
# - Configure native test runners
# - Set up iOS and Android test targets
# - Create necessary configuration files
\`\`\`

## Running Tests

### Local Testing

#### iOS Simulator
\`\`\`bash
# Start iOS simulator
open -a Simulator

# Run Patrol tests on iOS
patrol test --target integration_test/app_test.dart

# Run with specific device
patrol test --target integration_test/app_test.dart --device "iPhone 15 Pro"
\`\`\`

#### Android Emulator
\`\`\`bash
# List available emulators
emulator -list-avds

# Start Android emulator
emulator -avd <emulator_name>

# Run Patrol tests on Android
patrol test --target integration_test/app_test.dart --flavor development

# Run on specific device
patrol test --target integration_test/app_test.dart --device "emulator-5554"
\`\`\`

#### Physical Device
\`\`\`bash
# Connect device via USB and ensure debugging is enabled

# Run on connected device
patrol test --target integration_test/app_test.dart --device <device_id>
\`\`\`

### CI/CD Testing

#### GitHub Actions Example
\`\`\`yaml
- name: Run Patrol tests
  run: |
    patrol test \\
      --target integration_test/app_test.dart \\
      --flavor production \\
      --dart-define=CI=true
\`\`\`

## Writing Tests

Tests are located in the \`integration_test\` directory.

### Key Concepts

1. **Native Automation**: Access native UI elements and system features
2. **Custom Finders**: Create reusable finders for complex widgets
3. **Assertions**: Verify UI state and behavior
4. **Screenshots**: Capture screenshots during tests

### Example Test Structure

\`\`\`dart
import 'package:flutter_test/flutter_test.dart';
import 'package:patrol/patrol.dart';

void main() {
  patrolTest(
    'Counter increments',
    ($) async {
      await $.pumpWidgetAndSettle(MyApp());

      // Find and tap the increment button
      await $(Icons.add).tap();

      // Verify counter incremented
      expect($('1'), findsOneWidget);
    },
  );
}
\`\`\`

## Patrol Features

### Native Interactions
- Tap, swipe, scroll native elements
- Handle system dialogs and permissions
- Access device features (camera, location, etc.)

### Cross-Platform Support
- Single test codebase for iOS and Android
- Platform-specific behaviors when needed
- Web testing support (experimental)

### Advanced Features
- Network mocking
- Deep linking tests
- Push notification testing
- Background/foreground app state testing

## Debugging Tests

### Visual Debugging
\`\`\`bash
# Run tests with visual debugging
patrol test --target integration_test/app_test.dart --debug
\`\`\`

### Taking Screenshots
\`\`\`dart
// In your test
await $.takeScreenshot('home_screen');
\`\`\`

## Resources

- [Patrol Documentation](https://patrol.leancode.co/)
- [Patrol GitHub](https://github.com/patrol-for-flutter/patrol)
- [Flutter Testing Guide](https://docs.flutter.dev/testing)
- [Example Tests](https://github.com/patrol-for-flutter/patrol/tree/master/packages/patrol/example/integration_test)
`;

    await fs.writeFile(path.join(patrolDir, 'README.md'), patrolReadme);

    // Create basic app test
    const appTest = `import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:integration_test/integration_test.dart';
import 'package:patrol/patrol.dart';
import 'package:${config.projectName.toLowerCase().replace(/-/g, '_')}/main.dart';

void main() {
  IntegrationTestWidgetsFlutterBinding.ensureInitialized();

  group('App E2E Tests', () {
    patrolTest(
      'app launches successfully',
      (\$) async {
        // Launch the app
        await \$.pumpWidgetAndSettle(MyApp());

        // Verify app title is visible
        expect(\$('${config.projectName}'), findsOneWidget);

        // Take a screenshot
        await \$.takeScreenshot('app_launch');
      },
    );

    patrolTest(
      'counter increments correctly',
      (\$) async {
        await \$.pumpWidgetAndSettle(MyApp());

        // Verify initial counter value
        expect(\$('0'), findsOneWidget);

        // Tap the increment button
        await \$(Icons.add).tap();

        // Verify counter incremented
        expect(\$('1'), findsOneWidget);
        expect(\$('0'), findsNothing);

        // Tap again
        await \$(Icons.add).tap();

        // Verify counter is now 2
        expect(\$('2'), findsOneWidget);

        await \$.takeScreenshot('counter_incremented');
      },
    );

    patrolTest(
      'navigation to settings works',
      (\$) async {
        await \$.pumpWidgetAndSettle(MyApp());

        // Navigate to settings
        await \$(Icons.settings).tap();
        await \$.pumpAndSettle();

        // Verify we're on settings screen
        expect(\$('Settings'), findsWidgets);
        expect(\$('Dark Mode'), findsOneWidget);

        // Take screenshot
        await \$.takeScreenshot('settings_screen');

        // Navigate back
        await \$(Icons.arrow_back).tap();
        await \$.pumpAndSettle();

        // Verify we're back on home screen
        expect(\$('Welcome to ${config.projectName}!'), findsOneWidget);
      },
    );

    patrolTest(
      'dark mode toggle works',
      (\$) async {
        await \$.pumpWidgetAndSettle(MyApp());

        // Navigate to settings
        await \$(Icons.settings).tap();
        await \$.pumpAndSettle();

        // Find the dark mode switch
        final darkModeSwitch = \$(Switch);

        // Toggle dark mode
        await darkModeSwitch.tap();
        await \$.pumpAndSettle();

        // Take screenshot in dark mode
        await \$.takeScreenshot('dark_mode_enabled');

        // Toggle back to light mode
        await darkModeSwitch.tap();
        await \$.pumpAndSettle();

        // Take screenshot in light mode
        await \$.takeScreenshot('light_mode_enabled');
      },
    );

    patrolTest(
      'about dialog shows correctly',
      (\$) async {
        await \$.pumpWidgetAndSettle(MyApp());

        // Navigate to settings
        await \$(Icons.settings).tap();
        await \$.pumpAndSettle();

        // Tap on About
        await \$('About').tap();
        await \$.pumpAndSettle();

        // Verify dialog content
        expect(\$('${config.projectName}'), findsWidgets);
        expect(\$('Built with Flutter'), findsOneWidget);
        expect(\$('Generated by fluorite-flake'), findsOneWidget);

        // Take screenshot
        await \$.takeScreenshot('about_dialog');

        // Close dialog
        await \$('OK').tap();
        await \$.pumpAndSettle();
      },
    );

    patrolTest(
      'feature cards are displayed',
      (\$) async {
        await \$.pumpWidgetAndSettle(MyApp());

        // Verify feature cards are visible
        expect(\$('Cross-platform'), findsOneWidget);
        expect(\$('Material Design 3'), findsOneWidget);
        expect(\$('Go Router'), findsOneWidget);
        expect(\$('State Management'), findsOneWidget);

        // Scroll to ensure all cards are visible
        await \$('State Management').scrollTo();

        await \$.takeScreenshot('feature_cards');
      },
    );
  });

  group('Performance Tests', () {
    patrolTest(
      'app performs smoothly during navigation',
      (\$) async {
        await \$.pumpWidgetAndSettle(MyApp());

        // Measure time for navigation
        final stopwatch = Stopwatch()..start();

        // Navigate to settings
        await \$(Icons.settings).tap();
        await \$.pumpAndSettle();

        // Navigate back
        await \$(Icons.arrow_back).tap();
        await \$.pumpAndSettle();

        stopwatch.stop();

        // Verify navigation is responsive (< 500ms)
        expect(stopwatch.elapsedMilliseconds, lessThan(500),
            reason: 'Navigation should be responsive');
      },
    );
  });
}
`;

    await fs.writeFile(path.join(integrationTestDir, 'app_test.dart'), appTest);

    // Create smoke test
    const smokeTest = `import 'package:flutter_test/flutter_test.dart';
import 'package:integration_test/integration_test.dart';
import 'package:patrol/patrol.dart';
import 'package:${config.projectName.toLowerCase().replace(/-/g, '_')}/main.dart';

void main() {
  IntegrationTestWidgetsFlutterBinding.ensureInitialized();

  patrolTest(
    'smoke test - app launches without errors',
    (\$) async {
      // Launch the app
      await \$.pumpWidgetAndSettle(MyApp());

      // Basic smoke test - just verify the app launches
      expect(\$('${config.projectName}'), findsAtLeastNWidgets(1));

      // Verify no error widgets
      expect(\$(ErrorWidget), findsNothing);
      expect(\$(FlutterError), findsNothing);

      // Take a screenshot as evidence
      await \$.takeScreenshot('smoke_test_pass');
    },
  );
}
`;

    await fs.writeFile(path.join(integrationTestDir, 'smoke_test.dart'), smokeTest);

    // Create CI test suite
    const ciTestSuite = `import 'package:flutter_test/flutter_test.dart';
import 'package:integration_test/integration_test.dart';
import 'package:patrol/patrol.dart';
import 'package:${config.projectName.toLowerCase().replace(/-/g, '_')}/main.dart';

void main() {
  IntegrationTestWidgetsFlutterBinding.ensureInitialized();

  group('CI Test Suite', () {
    patrolTest(
      'critical user flow',
      (\$) async {
        await \$.pumpWidgetAndSettle(MyApp());

        // Test critical user flow
        // 1. App launches
        expect(\$('${config.projectName}'), findsAtLeastNWidgets(1));

        // 2. Counter works
        await \$(Icons.add).tap();
        expect(\$('1'), findsOneWidget);

        // 3. Navigation works
        await \$(Icons.settings).tap();
        await \$.pumpAndSettle();
        expect(\$('Settings'), findsWidgets);

        // 4. Can return to home
        await \$(Icons.arrow_back).tap();
        await \$.pumpAndSettle();
        expect(\$('Welcome to ${config.projectName}!'), findsOneWidget);

        // Test passed
        await \$.takeScreenshot('ci_test_success');
      },
      timeout: const Timeout(Duration(minutes: 2)),
    );
  });
}
`;

    await fs.writeFile(path.join(integrationTestDir, 'ci_test_suite.dart'), ciTestSuite);

    // Create patrol.yaml configuration
    const patrolConfig = `# Patrol Configuration
app_name: ${config.projectName}
android:
  package_name: com.example.${config.projectName.toLowerCase().replace(/-/g, '_')}
ios:
  bundle_id: com.example.${config.projectName.toLowerCase().replace(/-/g, '')}

# Test configuration
flavor: development

# Screenshots
screenshots:
  enabled: true
  path: patrol_screenshots

# Timeouts
timeouts:
  test: 120
  settle: 10
`;

    await fs.writeFile(path.join(config.projectPath, 'patrol.yaml'), patrolConfig);

    // Update gitignore to include Patrol artifacts
    const gitignorePath = path.join(config.projectPath, '.gitignore');
    const gitignoreContent = await fs.readFile(gitignorePath, 'utf-8');
    const updatedGitignore = `${gitignoreContent}
# Patrol artifacts
patrol_screenshots/
*.patrol.json
`;

    await fs.writeFile(gitignorePath, updatedGitignore);

    // Add test scripts to README
    const readmePath = path.join(config.projectPath, 'README.md');
    const readmeContent = await fs.readFile(readmePath, 'utf-8');
    const updatedReadme = readmeContent.replace(
        '### Testing and Analysis',
        `### E2E Testing with Patrol

\`\`\`bash
# Install Patrol CLI
curl -fsSL https://raw.githubusercontent.com/patrol-for-flutter/patrol-cli/main/install.sh | bash

# Bootstrap Patrol (one-time setup)
patrol bootstrap

# Run E2E tests
patrol test --target integration_test/app_test.dart

# Run smoke test
patrol test --target integration_test/smoke_test.dart

# Run CI test suite
patrol test --target integration_test/ci_test_suite.dart
\`\`\`

### Testing and Analysis`
    );

    await fs.writeFile(readmePath, updatedReadme);
}
