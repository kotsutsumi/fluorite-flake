/**
 * Flutterプロジェクト用READMEファイルを作成するヘルパー関数
 * 開発ガイド、コマンド、プロジェクト構造を含む包括的なドキュメントを生成する
 */

import path from 'node:path';
import fs from 'fs-extra';
import type { ProjectConfig } from '../../../commands/create/types.js';

/**
 * Flutterプロジェクト用READMEファイルを作成する
 * @param config プロジェクト設定
 */
export async function createFlutterReadme(config: ProjectConfig) {
    const readmeContent = `# ${config.projectName}

A Flutter application generated by fluorite-flake.

## Getting Started

This project is a starting point for a Flutter application with the following features:

- ✨ Material Design 3 with dynamic theming
- 🎨 Dark/Light mode support with persistence
- 🚀 Go Router for navigation
- 📱 Cross-platform support (iOS, Android, Web, Desktop)
- 🔧 Provider pattern for state management
- 🧪 Unit and widget testing setup

## Prerequisites

Before running this project, ensure you have:

1. **Flutter SDK**: Install from [flutter.dev](https://flutter.dev/docs/get-started/install)
2. **Development Environment**:
   - For Android: Android Studio with Android SDK
   - For iOS: Xcode (macOS only)
   - For Web: Chrome browser
   - For Desktop: Platform-specific requirements

## Development Commands

### Running the App

\`\`\`bash
# Get dependencies
flutter pub get

# Run on connected device/emulator
flutter run

# Run on specific platforms
flutter run -d chrome          # Web
flutter run -d macos           # macOS (macOS only)
flutter run -d windows         # Windows (Windows only)
flutter run -d linux           # Linux (Linux only)
\`\`\`

### Building for Production

\`\`\`bash
# Android
flutter build apk              # Debug APK
flutter build apk --release    # Release APK
flutter build appbundle        # App Bundle for Play Store

# iOS (macOS only)
flutter build ios

# Web
flutter build web

# Desktop
flutter build macos            # macOS (macOS only)
flutter build windows          # Windows (Windows only)
flutter build linux            # Linux (Linux only)
\`\`\`

### Testing and Analysis

\`\`\`bash
# Run tests
flutter test

# Analyze code
flutter analyze

# Format code
dart format .

# Check for outdated dependencies
flutter pub outdated
\`\`\`

## Project Structure

\`\`\`
lib/
├── main.dart              # App entry point
├── screens/               # Screen widgets
│   ├── home_screen.dart
│   └── settings_screen.dart
├── widgets/               # Reusable widgets
│   └── feature_card.dart
├── services/              # Business logic and services
│   └── theme_service.dart
├── models/                # Data models
└── utils/                 # Utility functions

test/                      # Test files
assets/                    # Images, fonts, etc.
\`\`\`

## Features

### Theme Management
- Toggle between light and dark modes
- Persistent theme selection using SharedPreferences
- Material Design 3 dynamic color system

### Navigation
- Declarative routing with go_router
- URL-based navigation (great for web)
- Type-safe route management

### State Management
- Provider pattern for reactive state
- Separation of UI and business logic
- Easy testing and maintainability

## Adding Dependencies

Add new dependencies to \`pubspec.yaml\`:

\`\`\`yaml
dependencies:
  flutter:
    sdk: flutter
  your_package: ^version
\`\`\`

Then run:
\`\`\`bash
flutter pub get
\`\`\`

## Contributing

1. Follow the [Dart style guide](https://dart.dev/guides/language/effective-dart/style)
2. Run \`flutter analyze\` before committing
3. Write tests for new features
4. Update documentation as needed

## Learn More

- [Flutter Documentation](https://docs.flutter.dev/)
- [Dart Language](https://dart.dev/)
- [Material Design](https://material.io/)
- [Go Router Package](https://pub.dev/packages/go_router)
- [Provider Package](https://pub.dev/packages/provider)
`;

    await fs.writeFile(path.join(config.projectPath, 'README.md'), readmeContent);
}
