/**
 * Vercel Blob設定用プロンプト機能
 */

import { isCancel, select, text } from "@clack/prompts";
import { getMessages } from "../../../i18n.js";
import {
    createBlobStore,
    createBlobToken,
    generateBlobStoreName,
    generateUniqueStoreName,
    listBlobStores,
} from "../../../utils/vercel-cli/blob-operations.js";
import type { BlobConfiguration, BlobStore } from "../../../utils/vercel-cli/blob-types.js";
import { BlobErrorCode, BlobOperationError } from "../../../utils/vercel-cli/blob-types.js";

/**
 * Blob設定フロー全体を実行する
 * @param projectName プロジェクト名
 * @returns Blob設定（無効化の場合はnull）
 */
export async function collectBlobConfiguration(projectName: string): Promise<BlobConfiguration | null> {
    const messages = getMessages();

    // Phase 1: Blob利用方式の選択（3択）
    const blobMode = (await select({
        message: messages.create.blob.setupPrompt,
        options: [
            { value: "new", label: messages.create.blob.modeNew },
            { value: "existing", label: messages.create.blob.modeExisting },
            { value: "none", label: messages.create.blob.modeNone },
        ],
    })) as "new" | "existing" | "none";

    if (isCancel(blobMode) || blobMode === "none") {
        return null;
    }

    if (blobMode === "existing") {
        const blobToken = await promptForToken();
        if (!blobToken) {
            console.log("Blobトークンが無効です。Blob設定をスキップします。");
            return null;
        }

        try {
            const existingStore = await selectExistingStore(blobToken);

            // 既存ストア選択時は新しいトークンを自動生成
            let finalToken = blobToken;
            let tokenId: string | undefined;
            let tokenScope: string | undefined;
            let tokenExpiresAt: string | undefined;
            let isAutoGenerated = false;

            try {
                console.log(`🔑 選択されたストア用のトークンを自動生成中: ${existingStore.storeId}`);
                const tokenResult = await createBlobToken({
                    storeId: existingStore.storeId,
                    scope: "read_write",
                    tokenType: "user",
                });

                if (tokenResult.success) {
                    finalToken = tokenResult.token;
                    tokenId = tokenResult.tokenId;
                    tokenScope = tokenResult.scope;
                    tokenExpiresAt = tokenResult.expiresAt;
                    isAutoGenerated = true;
                    console.log(`✅ 新しいトークンを自動生成しました: ${tokenResult.tokenId}`);
                }
            } catch (tokenError) {
                console.warn("⚠️ 新しいトークン生成に失敗しました。元のトークンを使用します:", tokenError);
                // 既存トークンで続行
            }

            return {
                mode: "existing",
                enabled: true,
                token: finalToken,
                storeId: existingStore.storeId,
                storeName: existingStore.storeName,
                storeUrl: existingStore.storeUrl,
                tokenId,
                tokenScope,
                tokenExpiresAt,
                isAutoGenerated,
            };
        } catch (error) {
            console.error("既存ストア選択でエラーが発生しました:", error);

            // フォールバック選択肢を提示
            const fallbackChoice = await select({
                message: "エラーが発生しました。どうしますか？",
                options: [
                    { value: "retry", label: "もう一度試す" },
                    { value: "disable", label: "Blob機能を無効にして続行" },
                ],
            });

            if (fallbackChoice === "retry") {
                // 再帰的に再試行
                return await collectBlobConfiguration(projectName);
            }

            return null;
        }
    }

    try {
        const newStore = await createNewStore(projectName);

        return {
            mode: "new",
            enabled: true,
            token: newStore.token || undefined,
            storeId: newStore.storeId,
            storeName: newStore.storeName,
            storeUrl: newStore.storeUrl,
            tokenId: newStore.tokenId,
            tokenScope: newStore.tokenScope,
            tokenExpiresAt: newStore.tokenExpiresAt,
            isAutoGenerated: newStore.isAutoGenerated,
        };
    } catch (error) {
        if (error instanceof BlobOperationError && error.code === BlobErrorCode.INVALID_TOKEN) {
            console.warn("Blobストアの作成に必要な認証情報が不足しているため、Blob設定をスキップします。");

            // フォールバック選択肢を提示
            const fallbackChoice = await select({
                message: "認証エラーが発生しました。どうしますか？",
                options: [
                    { value: "retry", label: "もう一度試す" },
                    { value: "disable", label: "Blob機能を無効にして続行" },
                ],
            });

            if (fallbackChoice === "retry") {
                // 再帰的に再試行
                return await collectBlobConfiguration(projectName);
            }

            return null;
        }

        // その他のエラーもフォールバック選択肢を提示
        console.error("ストア作成でエラーが発生しました:", error);

        const fallbackChoice = await select({
            message: "エラーが発生しました。どうしますか？",
            options: [
                { value: "retry", label: "もう一度試す" },
                { value: "disable", label: "Blob機能を無効にして続行" },
            ],
        });

        if (fallbackChoice === "retry") {
            return await collectBlobConfiguration(projectName);
        }

        return null;
    }
}

/**
 * トークン取得方法を案内する
 */
function showTokenAcquisitionGuide(): void {
    console.log("\n📋 BLOB_READ_WRITE_TOKEN の取得方法:");
    console.log("");
    console.log("🌐 方法1: Vercel ダッシュボード（推奨）");
    console.log("1. https://vercel.com/dashboard にアクセス");
    console.log("2. Storage → Create Database → Blob を選択");
    console.log("3. ストア名とリージョンを設定して作成");
    console.log("4. 作成されたBlobストアの Settings → Environment Variables から");
    console.log("   BLOB_READ_WRITE_TOKEN をコピー");
    console.log("");
    console.log("⚡ 方法2: Vercel CLI（要認証）");
    console.log("1. vercel login  # Vercelにログイン");
    console.log("2. vercel link   # プロジェクトをリンク");
    console.log("3. vercel blob create [ストア名]  # ストア作成");
    console.log("");
    console.log("📝 期待するトークン形式:");
    console.log("   vercel_blob_rw_xxxxxxxxxxxxxxx");
    console.log("");
}

/**
 * Blobトークンの入力と検証を行う
 * @returns 有効なトークン（キャンセル時はnull）
 */
async function promptForToken(options: { message?: string; showGuide?: boolean } = {}): Promise<string | null> {
    const messages = getMessages();
    let attempts = 0;
    const maxAttempts = 3;
    const message = options.message ?? messages.create.blob.tokenPrompt;

    // 初回のみガイドを表示
    if (options.showGuide !== false && attempts === 0) {
        showTokenAcquisitionGuide();
    }

    while (attempts < maxAttempts) {
        const token = await text({
            message,
            placeholder: "vercel_blob_rw_xxxxxxxxxxxxxxx",
            validate: (value: string) => {
                if (!value.trim()) {
                    return messages.create.blob.tokenRequired;
                }

                const trimmedToken = value.trim();
                // Vercel Blobトークンは `vercel_blob_rw_` または `blob_rw_` で始まる
                if (!(trimmedToken.startsWith("vercel_blob_rw_") || trimmedToken.startsWith("blob_rw_"))) {
                    return messages.create.blob.tokenInvalidFormat;
                }

                // Vercel Blobトークンの最小長を現実的な値に調整（約50文字以上）
                if (trimmedToken.length < 50) {
                    return messages.create.blob.tokenTooShort;
                }

                return;
            },
        });

        if (isCancel(token)) {
            console.warn("Blobトークン入力がキャンセルされました。");
            return null;
        }

        if (typeof token === "string") {
            const trimmedToken = token.trim();
            console.log("トークン形式の確認が完了しました。");
            return trimmedToken;
        }

        attempts++;
        if (attempts < maxAttempts) {
            console.log(`再試行してください（${attempts}/${maxAttempts}）`);
        }
    }

    console.log("最大試行回数に達しました。");
    return null;
}

/**
 * 新規ストア作成フロー
 * @param projectName プロジェクト名
 * @returns ストア情報（発行されたトークンを含む）
 */
async function createNewStore(projectName: string): Promise<{
    storeId: string;
    storeName: string;
    storeUrl: string;
    token: string;
    tokenId?: string;
    tokenScope?: string;
    tokenExpiresAt?: string;
    isAutoGenerated?: boolean;
}> {
    // 認証チェック: Vercel CLIのログイン状況を確認
    const existingStores: BlobStore[] = [];
    const requiresTokenForCreation = true; // デフォルトでトークンが必要と設定

    console.log("認証状況を確認中...");
    console.log("🔍 BLOB_READ_WRITE_TOKENが提供されていません");
    console.log("🔐 認証が必要です。BLOB_READ_WRITE_TOKEN の入力が必要です。");

    // デフォルトストア名を生成
    const baseName = generateBlobStoreName(projectName);
    const defaultName = generateUniqueStoreName(baseName, existingStores);

    // ストア名の入力
    const messages = getMessages();
    const storeNameInput = (await text({
        message: messages.create.blob.storeNamePrompt,
        initialValue: defaultName,
        validate: (value: string) => {
            if (!value.trim()) {
                return messages.create.blob.storeNameRequired;
            }

            const trimmed = value.trim();
            if (trimmed.length < 3 || trimmed.length > 32) {
                return "ストア名は3-32文字で入力してください";
            }

            if (!/^[a-z0-9-]+$/.test(trimmed)) {
                return "ストア名は英小文字、数字、ハイフンのみ使用可能です";
            }

            return;
        },
    })) as string;

    const storeName = storeNameInput.trim();

    console.log("Blobストアを作成中...");

    let tokenForCreation: string | undefined;

    if (requiresTokenForCreation) {
        const initialToken = await promptForToken({
            message: "BLOB_READ_WRITE_TOKEN を入力してください（新規作成に使用します）：",
            showGuide: true,
        });

        if (!initialToken) {
            throw new BlobOperationError(
                "BLOB_READ_WRITE_TOKEN の入力がキャンセルされました。",
                BlobErrorCode.INVALID_TOKEN
            );
        }

        tokenForCreation = initialToken.trim();
    }

    while (true) {
        try {
            const result = await createBlobStore({
                name: storeName,
                token: tokenForCreation,
            });

            console.log(`✅ Blobストア '${result.store.name}' を作成しました`);

            const resolvedToken = result.token || tokenForCreation || "";

            // createBlobStore で自動生成されたトークンかどうかを判定
            const isAutoGenerated = !tokenForCreation && !!result.token;

            return {
                storeId: result.store.id,
                storeName: result.store.name,
                storeUrl: result.store.url,
                token: resolvedToken,
                tokenId: undefined, // createBlobStore では tokenId は返されない
                tokenScope: isAutoGenerated ? "read_write" : undefined,
                tokenExpiresAt: undefined,
                isAutoGenerated,
            };
        } catch (error) {
            if (error instanceof BlobOperationError && error.code === BlobErrorCode.INVALID_TOKEN) {
                console.warn("提供された認証情報で Blob ストアを作成できませんでした。再入力してください。");

                const retryToken = await promptForToken({
                    message: "BLOB_READ_WRITE_TOKEN を入力してください（新規作成に使用します）：",
                    showGuide: false, // 再試行時はガイドを表示しない
                });

                if (!retryToken) {
                    throw new BlobOperationError(
                        "BLOB_READ_WRITE_TOKEN の入力がキャンセルされました。",
                        BlobErrorCode.INVALID_TOKEN
                    );
                }

                tokenForCreation = retryToken.trim();
                continue;
            }

            console.error(`❌ ストア作成に失敗しました: ${error instanceof Error ? error.message : error}`);
            throw error;
        }
    }
}

/**
 * 既存ストア選択フロー
 * @param token アクセストークン
 * @returns 選択されたストア情報
 */
async function selectExistingStore(token: string): Promise<{ storeId: string; storeName: string; storeUrl: string }> {
    console.log("Blobストア一覧を取得中...");

    try {
        const stores = await listBlobStores({ token });

        if (stores.length === 0) {
            throw new Error("利用可能なBlobストアが見つかりません。新規作成を選択してください。");
        }

        const selectedStoreId = (await select({
            message: "利用するBlobストアを選択してください：",
            options: stores.map((store) => ({
                value: store.id,
                label: store.name,
                hint: `作成日: ${new Date(store.createdAt).toLocaleDateString()}`,
            })),
        })) as string;

        const selectedStore = stores.find((store) => store.id === selectedStoreId);
        if (!selectedStore) {
            throw new Error("選択されたストアが見つかりません");
        }

        console.log(`✅ Blobストア '${selectedStore.name}' を選択しました`);

        return {
            storeId: selectedStore.id,
            storeName: selectedStore.name,
            storeUrl: selectedStore.url,
        };
    } catch (error) {
        console.error(`❌ ストア選択に失敗しました: ${error instanceof Error ? error.message : error}`);
        throw error;
    }
}

// EOF
