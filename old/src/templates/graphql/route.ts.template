import { ApolloServer } from '@apollo/server';
import { startServerAndCreateNextHandler } from '@as-integrations/next';
import { makeExecutableSchema } from '@graphql-tools/schema';
import { readFileSync } from 'fs';
import { join } from 'path';
import { resolvers } from '@/lib/graphql/resolvers';
import { auth } from '@/lib/auth';
import type { GraphQLContext } from '@/lib/graphql/resolvers';
import { NextRequest } from 'next/server';

// Load GraphQL schema
const typeDefs = readFileSync(
  join(process.cwd(), 'lib', 'graphql', 'schema.graphql'),
  'utf-8'
);

// Create executable schema
const schema = makeExecutableSchema({
  typeDefs,
  resolvers,
});

// Create Apollo Server
const server = new ApolloServer<GraphQLContext>({
  schema,
  introspection: process.env.NODE_ENV !== 'production',
  csrfPrevention: true,
  formatError: (error) => {
    // Log errors in development
    if (process.env.NODE_ENV === 'development') {
      console.error('GraphQL Error:', error);
    }

    // Return formatted error
    return {
      message: error.message,
      extensions: {
        code: error.extensions?.code || 'INTERNAL_ERROR',
        ...(process.env.NODE_ENV === 'development' && {
          stacktrace: error.extensions?.stacktrace,
        }),
      },
    };
  },
});

// Create Next.js handler
const handler = startServerAndCreateNextHandler<NextRequest, GraphQLContext>(server, {
  context: async (req) => {
    // Get the authorization header
    const authHeader = req.headers.get('authorization');

    // Initialize context
    let user = null;
    let session = null;

    if (authHeader) {
      const token = authHeader.replace('Bearer ', '');

      try {
        // Validate the token and get user info
        const tokenData = await auth.validateAccessToken(token);

        if (tokenData && tokenData.userId) {
          // Get user from database
          const dbUser = await db.user.findUnique({
            where: { id: tokenData.userId },
            select: {
              id: true,
              email: true,
              role: true,
              name: true,
            },
          });

          if (dbUser) {
            user = dbUser;
            // You could also load the session here if needed
            session = tokenData.session;
          }
        }
      } catch (error) {
        // Token validation failed, but we'll continue without auth
        // The resolvers will handle authentication requirements
        if (process.env.NODE_ENV === 'development') {
          console.error('Auth validation error:', error);
        }
      }
    }

    // Return the context object
    return {
      user,
      session,
      req,
    };
  },
});

// Export route handlers
export { handler as GET, handler as POST };

// Optional: Add OPTIONS handler for CORS preflight
export async function OPTIONS(req: NextRequest) {
  return new Response(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
      'Access-Control-Max-Age': '86400',
    },
  });
}