type Query {
  # User queries
  me: User
  user(id: ID!): User
  users(limit: Int = 10, offset: Int = 0): UserList!

  # Organization queries
  organization(id: ID!): Organization
  organizations(limit: Int = 10, offset: Int = 0): OrganizationList!
  myOrganizations: [Organization!]!

  # Profile queries
  profile(userId: ID!): Profile
  myProfile: Profile

  # Stats queries
  dashboardStats: DashboardStats!
}

type Mutation {
  # Authentication mutations
  login(input: LoginInput!): AuthPayload!
  register(input: RegisterInput!): AuthPayload!
  logout: Boolean!
  refreshToken(refreshToken: String!): AuthPayload!
  resetPassword(email: String!): Boolean!
  changePassword(oldPassword: String!, newPassword: String!): Boolean!

  # User mutations
  updateUser(id: ID!, input: UpdateUserInput!): User!
  deleteUser(id: ID!): Boolean!

  # Organization mutations
  createOrganization(input: CreateOrganizationInput!): Organization!
  updateOrganization(id: ID!, input: UpdateOrganizationInput!): Organization!
  deleteOrganization(id: ID!): Boolean!
  addUserToOrganization(organizationId: ID!, userId: ID!, role: OrganizationRole!): OrganizationMember!
  removeUserFromOrganization(organizationId: ID!, userId: ID!): Boolean!

  # Profile mutations
  updateProfile(input: UpdateProfileInput!): Profile!
  uploadAvatar(file: Upload!): String!
}

type Subscription {
  # Real-time updates
  userUpdated(userId: ID!): User!
  organizationUpdated(organizationId: ID!): Organization!
}

# User types
type User {
  id: ID!
  email: String!
  name: String!
  role: UserRole!
  emailVerified: Boolean!
  profile: Profile
  organizations: [OrganizationMember!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserList {
  items: [User!]!
  total: Int!
  hasMore: Boolean!
}

enum UserRole {
  ADMIN
  USER
  GUEST
}

# Organization types
type Organization {
  id: ID!
  name: String!
  slug: String!
  description: String
  logo: String
  members: [OrganizationMember!]!
  owner: User!
  settings: OrganizationSettings
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OrganizationList {
  items: [Organization!]!
  total: Int!
  hasMore: Boolean!
}

type OrganizationMember {
  id: ID!
  user: User!
  organization: Organization!
  role: OrganizationRole!
  joinedAt: DateTime!
}

enum OrganizationRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

type OrganizationSettings {
  allowInvites: Boolean!
  requireApproval: Boolean!
  maxMembers: Int
}

# Profile types
type Profile {
  id: ID!
  user: User!
  displayName: String
  bio: String
  avatar: String
  phone: String
  location: String
  website: String
  socialLinks: SocialLinks
  preferences: ProfilePreferences
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SocialLinks {
  twitter: String
  github: String
  linkedin: String
  website: String
}

type ProfilePreferences {
  theme: Theme!
  language: String!
  notifications: NotificationPreferences!
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}

type NotificationPreferences {
  email: Boolean!
  push: Boolean!
  sms: Boolean!
}

# Auth types
type AuthPayload {
  user: User!
  accessToken: String!
  refreshToken: String!
  expiresIn: Int!
}

# Dashboard types
type DashboardStats {
  totalUsers: Int!
  totalOrganizations: Int!
  activeUsers: Int!
  recentActivity: [Activity!]!
}

type Activity {
  id: ID!
  type: ActivityType!
  description: String!
  user: User!
  timestamp: DateTime!
}

enum ActivityType {
  USER_REGISTERED
  USER_LOGIN
  ORGANIZATION_CREATED
  MEMBER_ADDED
  PROFILE_UPDATED
}

# Input types
input LoginInput {
  email: String!
  password: String!
  rememberMe: Boolean
}

input RegisterInput {
  email: String!
  password: String!
  name: String!
  organizationName: String
}

input UpdateUserInput {
  name: String
  email: String
  role: UserRole
}

input CreateOrganizationInput {
  name: String!
  description: String
  slug: String
}

input UpdateOrganizationInput {
  name: String
  description: String
  logo: String
  settings: OrganizationSettingsInput
}

input OrganizationSettingsInput {
  allowInvites: Boolean
  requireApproval: Boolean
  maxMembers: Int
}

input UpdateProfileInput {
  displayName: String
  bio: String
  phone: String
  location: String
  website: String
  socialLinks: SocialLinksInput
  preferences: ProfilePreferencesInput
}

input SocialLinksInput {
  twitter: String
  github: String
  linkedin: String
  website: String
}

input ProfilePreferencesInput {
  theme: Theme
  language: String
  notifications: NotificationPreferencesInput
}

input NotificationPreferencesInput {
  email: Boolean
  push: Boolean
  sms: Boolean
}

# Scalar types
scalar DateTime
scalar Upload