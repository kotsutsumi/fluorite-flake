import { NextResponse } from 'next/server';
import prisma from '@/lib/db';
import { getApiSession } from '@/lib/getApiSession';
import { APP_ROLES } from '@/lib/roles';
import { toSlug } from '@/lib/to-slug';

export const runtime = 'nodejs';

export async function PUT(request: Request, { params }: { params: { id: string } }) {
    const session = await getApiSession(request);

    if (!session || session.user.role !== APP_ROLES.ADMIN) {
        return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
    }

    const payload = await request.json();
    const name = String(payload.name ?? '').trim();
    const slug = String(payload.slug ?? '') || toSlug(name);
    const metadata =
        payload.metadata && typeof payload.metadata === 'object' ? payload.metadata : undefined;

    if (!name) {
        return NextResponse.json({ error: '組織名は必須です。' }, { status: 400 });
    }

    await prisma.organization.update({
        where: { id: params.id },
        data: {
            name,
            slug,
            metadata,
        },
    });

    const organizations = await prisma.organization.findMany({
        include: {
            members: {
                include: {
                    user: {
                        select: { id: true, email: true, name: true, role: true },
                    },
                },
            },
        },
        orderBy: { createdAt: 'desc' },
    });

    return NextResponse.json({ organizations });
}

export async function DELETE(request: Request, { params }: { params: { id: string } }) {
    const session = await getApiSession(request);

    if (!session || session.user.role !== APP_ROLES.ADMIN) {
        return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
    }

    await prisma.member.deleteMany({ where: { organizationId: params.id } });
    await prisma.invitation.deleteMany({ where: { organizationId: params.id } });
    await prisma.organization.delete({ where: { id: params.id } });

    const organizations = await prisma.organization.findMany({
        include: {
            members: {
                include: {
                    user: {
                        select: { id: true, email: true, name: true, role: true },
                    },
                },
            },
        },
        orderBy: { createdAt: 'desc' },
    });

    return NextResponse.json({ organizations });
}
