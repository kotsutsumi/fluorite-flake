import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { requireSession, getAccessibleOrganizationIds } from '@/lib/auth-server';
import prisma from '@/lib/db';
import { APP_ROLES, type AppRole } from '@/lib/roles';

export default async function DashboardPage() {
  const session = await requireSession();
  const role = (session.user?.role as string) ?? APP_ROLES.USER;
  const organizationIds = await getAccessibleOrganizationIds(session.user.id, role as AppRole);

  const [organizations, memberCount, pendingInvites] = await Promise.all([
    prisma.organization.findMany({
      where: role === APP_ROLES.ADMIN ? undefined : { id: { in: organizationIds } },
      include: {
        _count: { select: { members: true } },
      },
      orderBy: { createdAt: 'desc' },
      take: 5,
    }),
    prisma.member.count({
      where: role === APP_ROLES.ADMIN ? undefined : { organizationId: { in: organizationIds } },
    }),
    prisma.invitation.count({
      where: role === APP_ROLES.ADMIN ? undefined : { organizationId: { in: organizationIds }, status: 'pending' },
    }),
  ]);

  return (
    <div className="grid gap-6 md:grid-cols-2 xl:grid-cols-3">
      <Card>
        <CardHeader>
          <CardTitle>参加している組織</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-4xl font-bold">{organizations.length}</p>
          <p className="text-sm text-muted-foreground">直近5件までの組織を表示しています</p>
        </CardContent>
      </Card>
      <Card>
        <CardHeader>
          <CardTitle>所属ユーザー</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-4xl font-bold">{memberCount}</p>
          <p className="text-sm text-muted-foreground">権限に応じて閲覧可能なユーザー数</p>
        </CardContent>
      </Card>
      <Card>
        <CardHeader>
          <CardTitle>未処理の招待</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-4xl font-bold">{pendingInvites}</p>
          <p className="text-sm text-muted-foreground">期限切れに注意してください</p>
        </CardContent>
      </Card>
      <Card className="md:col-span-2 xl:col-span-3">
        <CardHeader>
          <CardTitle>最近の組織</CardTitle>
        </CardHeader>
        <CardContent className="grid gap-4 md:grid-cols-2 xl:grid-cols-3">
          {organizations.map((organization) => (
            <div key={organization.id} className="rounded-lg border bg-card p-4 shadow-sm">
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-semibold">{organization.name}</h3>
                <Badge variant="outline">メンバー {organization._count.members}</Badge>
              </div>
              <p className="mt-2 text-sm text-muted-foreground">slug: {organization.slug}</p>
              <p className="text-xs text-muted-foreground">作成日: {organization.createdAt.toLocaleDateString('ja-JP')}</p>
            </div>
          ))}
          {organizations.length === 0 && (
            <p className="text-sm text-muted-foreground">表示する組織がまだありません。</p>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
