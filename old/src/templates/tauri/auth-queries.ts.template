import { gql } from '@apollo/client';

// User fragments
export const USER_FRAGMENT = gql`
  fragment UserFragment on User {
    id
    email
    name
    role
    emailVerified
    createdAt
    updatedAt
  }
`;

export const USER_WITH_PROFILE_FRAGMENT = gql`
  fragment UserWithProfileFragment on User {
    ...UserFragment
    profile {
      id
      displayName
      bio
      avatar
      phone
      location
      website
      socialLinks {
        twitter
        github
        linkedin
        website
      }
      preferences {
        theme
        language
        notifications {
          email
          push
          sms
        }
      }
    }
  }
  ${USER_FRAGMENT}
`;

// Authentication mutations
export const LOGIN_MUTATION = gql`
  mutation Login($input: LoginInput!) {
    login(input: $input) {
      user {
        ...UserWithProfileFragment
      }
      accessToken
      refreshToken
      expiresIn
    }
  }
  ${USER_WITH_PROFILE_FRAGMENT}
`;

export const REGISTER_MUTATION = gql`
  mutation Register($input: RegisterInput!) {
    register(input: $input) {
      user {
        ...UserWithProfileFragment
      }
      accessToken
      refreshToken
      expiresIn
    }
  }
  ${USER_WITH_PROFILE_FRAGMENT}
`;

export const LOGOUT_MUTATION = gql`
  mutation Logout {
    logout
  }
`;

export const REFRESH_TOKEN_MUTATION = gql`
  mutation RefreshToken($refreshToken: String!) {
    refreshToken(refreshToken: $refreshToken) {
      user {
        ...UserFragment
      }
      accessToken
      refreshToken
      expiresIn
    }
  }
  ${USER_FRAGMENT}
`;

export const RESET_PASSWORD_MUTATION = gql`
  mutation ResetPassword($email: String!) {
    resetPassword(email: $email)
  }
`;

export const CHANGE_PASSWORD_MUTATION = gql`
  mutation ChangePassword($oldPassword: String!, $newPassword: String!) {
    changePassword(oldPassword: $oldPassword, newPassword: $newPassword)
  }
`;

// User queries
export const ME_QUERY = gql`
  query Me {
    me {
      ...UserWithProfileFragment
      organizations {
        id
        organization {
          id
          name
          slug
          logo
        }
        role
        joinedAt
      }
    }
  }
  ${USER_WITH_PROFILE_FRAGMENT}
`;

export const GET_USER_QUERY = gql`
  query GetUser($id: ID!) {
    user(id: $id) {
      ...UserWithProfileFragment
    }
  }
  ${USER_WITH_PROFILE_FRAGMENT}
`;

// Organization queries
export const MY_ORGANIZATIONS_QUERY = gql`
  query MyOrganizations {
    myOrganizations {
      id
      name
      slug
      description
      logo
      members {
        id
        user {
          id
          name
          email
        }
        role
      }
    }
  }
`;

export const ORGANIZATION_QUERY = gql`
  query Organization($id: ID!) {
    organization(id: $id) {
      id
      name
      slug
      description
      logo
      owner {
        id
        name
        email
      }
      members {
        id
        user {
          id
          name
          email
        }
        role
        joinedAt
      }
      settings {
        allowInvites
        requireApproval
        maxMembers
      }
      createdAt
      updatedAt
    }
  }
`;

// Organization mutations
export const CREATE_ORGANIZATION_MUTATION = gql`
  mutation CreateOrganization($input: CreateOrganizationInput!) {
    createOrganization(input: $input) {
      id
      name
      slug
      description
      logo
    }
  }
`;

export const UPDATE_ORGANIZATION_MUTATION = gql`
  mutation UpdateOrganization($id: ID!, $input: UpdateOrganizationInput!) {
    updateOrganization(id: $id, input: $input) {
      id
      name
      slug
      description
      logo
      settings {
        allowInvites
        requireApproval
        maxMembers
      }
    }
  }
`;

export const DELETE_ORGANIZATION_MUTATION = gql`
  mutation DeleteOrganization($id: ID!) {
    deleteOrganization(id: $id)
  }
`;

// Profile queries and mutations
export const MY_PROFILE_QUERY = gql`
  query MyProfile {
    myProfile {
      id
      displayName
      bio
      avatar
      phone
      location
      website
      socialLinks {
        twitter
        github
        linkedin
        website
      }
      preferences {
        theme
        language
        notifications {
          email
          push
          sms
        }
      }
    }
  }
`;

export const UPDATE_PROFILE_MUTATION = gql`
  mutation UpdateProfile($input: UpdateProfileInput!) {
    updateProfile(input: $input) {
      id
      displayName
      bio
      avatar
      phone
      location
      website
      socialLinks {
        twitter
        github
        linkedin
        website
      }
      preferences {
        theme
        language
        notifications {
          email
          push
          sms
        }
      }
    }
  }
`;

export const UPLOAD_AVATAR_MUTATION = gql`
  mutation UploadAvatar($file: Upload!) {
    uploadAvatar(file: $file)
  }
`;

// Dashboard query
export const DASHBOARD_STATS_QUERY = gql`
  query DashboardStats {
    dashboardStats {
      totalUsers
      totalOrganizations
      activeUsers
      recentActivity {
        id
        type
        description
        user {
          id
          name
        }
        timestamp
      }
    }
  }
`;

// User management queries (Admin)
export const USERS_QUERY = gql`
  query Users($limit: Int, $offset: Int) {
    users(limit: $limit, offset: $offset) {
      items {
        id
        email
        name
        role
        emailVerified
        createdAt
      }
      total
      hasMore
    }
  }
`;

export const UPDATE_USER_MUTATION = gql`
  mutation UpdateUser($id: ID!, $input: UpdateUserInput!) {
    updateUser(id: $id, input: $input) {
      id
      email
      name
      role
    }
  }
`;

export const DELETE_USER_MUTATION = gql`
  mutation DeleteUser($id: ID!) {
    deleteUser(id: $id)
  }
`;

// Type definitions for TypeScript
export interface LoginInput {
  email: string;
  password: string;
  rememberMe?: boolean;
}

export interface RegisterInput {
  email: string;
  password: string;
  name: string;
  organizationName?: string;
}

export interface UpdateProfileInput {
  displayName?: string;
  bio?: string;
  phone?: string;
  location?: string;
  website?: string;
  socialLinks?: SocialLinksInput;
  preferences?: ProfilePreferencesInput;
}

export interface SocialLinksInput {
  twitter?: string;
  github?: string;
  linkedin?: string;
  website?: string;
}

export interface ProfilePreferencesInput {
  theme?: 'LIGHT' | 'DARK' | 'SYSTEM';
  language?: string;
  notifications?: NotificationPreferencesInput;
}

export interface NotificationPreferencesInput {
  email?: boolean;
  push?: boolean;
  sms?: boolean;
}

export interface CreateOrganizationInput {
  name: string;
  description?: string;
  slug?: string;
}

export interface UpdateOrganizationInput {
  name?: string;
  description?: string;
  logo?: string;
  settings?: OrganizationSettingsInput;
}

export interface OrganizationSettingsInput {
  allowInvites?: boolean;
  requireApproval?: boolean;
  maxMembers?: number;
}

export interface UpdateUserInput {
  name?: string;
  email?: string;
  role?: 'ADMIN' | 'USER' | 'GUEST';
}

export interface DashboardStats {
  totalUsers: number;
  totalOrganizations: number;
  activeUsers: number;
  recentActivity: Activity[];
}

export interface Activity {
  id: string;
  type: 'USER_REGISTERED' | 'USER_LOGIN' | 'ORGANIZATION_CREATED' | 'MEMBER_ADDED' | 'PROFILE_UPDATED';
  description: string;
  user: {
    id: string;
    name: string;
  };
  timestamp: string;
}