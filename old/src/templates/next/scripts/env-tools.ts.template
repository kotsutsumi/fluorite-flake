#!/usr/bin/env tsx

import { createInterface } from 'node:readline/promises';
import { spawn } from 'node:child_process';
import { promisify } from 'node:util';
import fs from 'node:fs/promises';
import path from 'node:path';

const execAsync = promisify(spawn);

const FILES = [
    '.env',
    '.env.local',
    '.env.development',
    '.env.staging',
    '.env.production',
    '.env.prod'
];

const ZIP_FILE = 'env-files.zip';

async function checkCommand(command: string): Promise<boolean> {
    // Cross-platform command detection
    const isWindows = process.platform === 'win32';

    try {
        // Try running the command with --version or --help to check if it exists
        await new Promise((resolve, reject) => {
            const testArgs = command === 'zip' ? ['-v'] : ['--version'];
            const proc = spawn(command, testArgs, {
                stdio: 'ignore', // Ignore all output
                shell: isWindows // Use shell on Windows for better command resolution
            });

            proc.on('error', () => {
                // Command doesn't exist
                reject(new Error('Command not found'));
            });

            proc.on('close', (code) => {
                // Command exists (regardless of exit code)
                resolve(null);
            });
        });
        return true;
    } catch {
        // Try alternative detection methods
        if (isWindows) {
            try {
                // On Windows, try 'where' command
                await new Promise((resolve, reject) => {
                    const proc = spawn('where', [command], {
                        stdio: 'ignore',
                        shell: true
                    });
                    proc.on('close', (code) => {
                        if (code === 0) resolve(null);
                        else reject(new Error('Command not found'));
                    });
                });
                return true;
            } catch {
                return false;
            }
        } else {
            // On Unix-like systems, try 'command -v'
            try {
                await new Promise((resolve, reject) => {
                    const proc = spawn('sh', ['-c', `command -v ${command}`], {
                        stdio: 'ignore'
                    });
                    proc.on('close', (code) => {
                        if (code === 0) resolve(null);
                        else reject(new Error('Command not found'));
                    });
                });
                return true;
            } catch {
                return false;
            }
        }
    }
}

async function execCommand(command: string, args: string[]): Promise<void> {
    return new Promise((resolve, reject) => {
        const proc = spawn(command, args, {
            stdio: ['inherit', 'pipe', 'pipe']
        });

        let stdout = '';
        let stderr = '';

        proc.stdout?.on('data', (data) => {
            stdout += data.toString();
            process.stdout.write(data);
        });

        proc.stderr?.on('data', (data) => {
            stderr += data.toString();
            process.stderr.write(data);
        });

        proc.on('close', (code) => {
            if (code === 0) {
                resolve();
            } else {
                reject(new Error(`Command failed with code ${code}: ${stderr}`));
            }
        });
    });
}

async function getPassword(prompt: string): Promise<string> {
    const rl = createInterface({
        input: process.stdin,
        output: process.stdout
    });

    // Hide password input
    process.stdout.write(prompt);
    const password = await new Promise<string>((resolve) => {
        const stdin = process.stdin;
        const oldRawMode = stdin.isRaw;

        if (stdin.isTTY) {
            stdin.setRawMode(true);
        }

        let password = '';
        stdin.on('data', function onData(char) {
            const str = char.toString();

            switch (str) {
                case '\n':
                case '\r':
                case '\u0004':
                    stdin.removeListener('data', onData);
                    if (stdin.isTTY && oldRawMode !== undefined) {
                        stdin.setRawMode(oldRawMode);
                    }
                    process.stdout.write('\n');
                    resolve(password);
                    break;
                case '\u0003': // Ctrl+C
                    process.exit(1);
                    break;
                case '\u007f': // Backspace
                case '\b':
                case '\x7f':
                case '\x08':
                    if (password.length > 0) {
                        password = password.slice(0, -1);
                        process.stdout.write('\b \b');
                    }
                    break;
                default:
                    password += str;
                    process.stdout.write('*');
                    break;
            }
        });
    });

    rl.close();
    return password;
}

async function encrypt() {
    // Check if zip command is available
    const isWindows = process.platform === 'win32';
    const hasZip = await checkCommand('zip');

    if (!hasZip) {
        console.error('‚ùå Error: zip command not found');
        console.error('Please install zip:');
        console.error('  macOS: brew install zip');
        console.error('  Ubuntu/Debian: sudo apt-get install zip');

        if (isWindows) {
            console.error('  Windows Options:');
            console.error('    1. Install Git for Windows (includes zip): https://git-scm.com/download/win');
            console.error('    2. Use PowerShell Compress-Archive (modify this script)');
            console.error('    3. Install 7-Zip and add to PATH: https://www.7-zip.org/');
            console.error('    4. Use WSL (Windows Subsystem for Linux)');
            console.error('\nFor 7-Zip users, you may need to create an alias:');
            console.error('  PowerShell: Set-Alias zip "C:\\Program Files\\7-Zip\\7z.exe"');
        }

        process.exit(1);
    }

    // Check which env files exist
    const existingFiles: string[] = [];
    for (const file of FILES) {
        try {
            await fs.access(file);
            existingFiles.push(file);
        } catch {
            // File doesn't exist, skip it
        }
    }

    if (existingFiles.length === 0) {
        console.error('‚ùå No environment files found to encrypt');
        process.exit(1);
    }

    console.log('üì¶ Encrypting environment files...');
    console.log(`Files to encrypt: ${existingFiles.join(', ')}`);

    const password = await getPassword('Enter password for encryption: ');
    const confirmPassword = await getPassword('Confirm password: ');

    if (password !== confirmPassword) {
        console.error('‚ùå Passwords do not match');
        process.exit(1);
    }

    try {
        await execCommand('zip', ['-P', password, ZIP_FILE, ...existingFiles]);
        console.log(`‚úÖ Successfully created encrypted ${ZIP_FILE}`);
        console.log('üìã Share this file and password separately for security');
    } catch (error) {
        console.error('‚ùå Encryption failed:', error);
        process.exit(1);
    }
}

async function decrypt() {
    // Check if unzip command is available
    const isWindows = process.platform === 'win32';
    const hasUnzip = await checkCommand('unzip');

    if (!hasUnzip) {
        console.error('‚ùå Error: unzip command not found');
        console.error('Please install unzip:');
        console.error('  macOS: brew install unzip');
        console.error('  Ubuntu/Debian: sudo apt-get install unzip');

        if (isWindows) {
            console.error('  Windows Options:');
            console.error('    1. Install Git for Windows (includes unzip): https://git-scm.com/download/win');
            console.error('    2. Use PowerShell Expand-Archive (modify this script)');
            console.error('    3. Install 7-Zip and add to PATH: https://www.7-zip.org/');
            console.error('    4. Use WSL (Windows Subsystem for Linux)');
            console.error('\nFor 7-Zip users, you may need to create an alias:');
            console.error('  PowerShell: Set-Alias unzip "C:\\Program Files\\7-Zip\\7z.exe"');
        }

        process.exit(1);
    }

    // Check if zip file exists
    try {
        await fs.access(ZIP_FILE);
    } catch {
        console.error(`‚ùå ${ZIP_FILE} not found`);
        process.exit(1);
    }

    console.log(`üì¶ Decrypting ${ZIP_FILE}...`);

    const password = await getPassword('Enter password for decryption: ');

    try {
        await execCommand('unzip', ['-o', '-P', password, ZIP_FILE]);
        console.log('‚úÖ Successfully decrypted environment files');
        console.log('üìã Environment files restored:');
        for (const file of FILES) {
            try {
                await fs.access(file);
                console.log(`  ‚úì ${file}`);
            } catch {
                // File wasn't in the archive
            }
        }
    } catch (error) {
        console.error('‚ùå Decryption failed - check your password');
        process.exit(1);
    }
}

async function main() {
    const command = process.argv[2];

    console.log('üîê Environment Files Encryption Tool');
    console.log('=====================================\n');

    switch (command) {
        case 'encrypt':
            await encrypt();
            break;
        case 'decrypt':
            await decrypt();
            break;
        default:
            console.log('Usage:');
            console.log('  tsx scripts/env-tools.ts encrypt - Create encrypted backup of env files');
            console.log('  tsx scripts/env-tools.ts decrypt - Restore env files from encrypted backup');
            console.log('\nAlternatively, use npm/pnpm/yarn scripts:');
            console.log('  pnpm env:encrypt');
            console.log('  pnpm env:decrypt');
            process.exit(1);
    }
}

main().catch((error) => {
    console.error('‚ùå Unexpected error:', error);
    process.exit(1);
});