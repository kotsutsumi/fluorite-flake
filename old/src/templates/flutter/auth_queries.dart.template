// GraphQL Queries and Mutations for Authentication

class AuthQueries {
  // Login mutation
  static const String login = '''
    mutation Login(\$input: LoginInput!) {
      login(input: \$input) {
        user {
          id
          email
          name
          role
          emailVerified
          profile {
            id
            displayName
            bio
            avatar
            phone
            location
            website
          }
        }
        accessToken
        refreshToken
        expiresIn
      }
    }
  ''';

  // Register mutation
  static const String register = '''
    mutation Register(\$input: RegisterInput!) {
      register(input: \$input) {
        user {
          id
          email
          name
          role
          emailVerified
          profile {
            id
            displayName
            bio
            avatar
          }
        }
        accessToken
        refreshToken
        expiresIn
      }
    }
  ''';

  // Logout mutation
  static const String logout = '''
    mutation Logout {
      logout
    }
  ''';

  // Refresh token mutation
  static const String refreshToken = '''
    mutation RefreshToken(\$refreshToken: String!) {
      refreshToken(refreshToken: \$refreshToken) {
        user {
          id
          email
          name
          role
        }
        accessToken
        refreshToken
        expiresIn
      }
    }
  ''';

  // Reset password mutation
  static const String resetPassword = '''
    mutation ResetPassword(\$email: String!) {
      resetPassword(email: \$email)
    }
  ''';

  // Change password mutation
  static const String changePassword = '''
    mutation ChangePassword(\$oldPassword: String!, \$newPassword: String!) {
      changePassword(oldPassword: \$oldPassword, newPassword: \$newPassword)
    }
  ''';

  // Get current user query
  static const String me = '''
    query Me {
      me {
        id
        email
        name
        role
        emailVerified
        profile {
          id
          displayName
          bio
          avatar
          phone
          location
          website
          socialLinks {
            twitter
            github
            linkedin
            website
          }
          preferences {
            theme
            language
            notifications {
              email
              push
              sms
            }
          }
        }
        organizations {
          id
          organization {
            id
            name
            slug
            logo
          }
          role
          joinedAt
        }
      }
    }
  ''';

  // Get user by ID
  static const String getUser = '''
    query GetUser(\$id: ID!) {
      user(id: \$id) {
        id
        email
        name
        role
        emailVerified
        profile {
          id
          displayName
          bio
          avatar
          phone
          location
          website
        }
      }
    }
  ''';

  // Get my organizations
  static const String myOrganizations = '''
    query MyOrganizations {
      myOrganizations {
        id
        name
        slug
        description
        logo
        members {
          id
          user {
            id
            name
            email
          }
          role
        }
      }
    }
  ''';

  // Get my profile
  static const String myProfile = '''
    query MyProfile {
      myProfile {
        id
        displayName
        bio
        avatar
        phone
        location
        website
        socialLinks {
          twitter
          github
          linkedin
          website
        }
        preferences {
          theme
          language
          notifications {
            email
            push
            sms
          }
        }
      }
    }
  ''';

  // Update profile mutation
  static const String updateProfile = '''
    mutation UpdateProfile(\$input: UpdateProfileInput!) {
      updateProfile(input: \$input) {
        id
        displayName
        bio
        avatar
        phone
        location
        website
      }
    }
  ''';

  // Dashboard stats query
  static const String dashboardStats = '''
    query DashboardStats {
      dashboardStats {
        totalUsers
        totalOrganizations
        activeUsers
        recentActivity {
          id
          type
          description
          user {
            id
            name
          }
          timestamp
        }
      }
    }
  ''';
}

// Data models
class User {
  final String id;
  final String email;
  final String name;
  final String role;
  final bool emailVerified;
  final Profile? profile;
  final List<OrganizationMember>? organizations;
  final String createdAt;
  final String updatedAt;

  User({
    required this.id,
    required this.email,
    required this.name,
    required this.role,
    required this.emailVerified,
    this.profile,
    this.organizations,
    required this.createdAt,
    required this.updatedAt,
  });

  factory User.fromJson(Map<String, dynamic> json) {
    return User(
      id: json['id'],
      email: json['email'],
      name: json['name'],
      role: json['role'],
      emailVerified: json['emailVerified'] ?? false,
      profile: json['profile'] != null ? Profile.fromJson(json['profile']) : null,
      organizations: json['organizations'] != null
          ? (json['organizations'] as List)
              .map((e) => OrganizationMember.fromJson(e))
              .toList()
          : null,
      createdAt: json['createdAt'] ?? '',
      updatedAt: json['updatedAt'] ?? '',
    );
  }

  Map<String, dynamic> toJson() => {
        'id': id,
        'email': email,
        'name': name,
        'role': role,
        'emailVerified': emailVerified,
        'profile': profile?.toJson(),
        'organizations': organizations?.map((e) => e.toJson()).toList(),
        'createdAt': createdAt,
        'updatedAt': updatedAt,
      };
}

class Profile {
  final String id;
  final String? displayName;
  final String? bio;
  final String? avatar;
  final String? phone;
  final String? location;
  final String? website;
  final SocialLinks? socialLinks;
  final ProfilePreferences? preferences;

  Profile({
    required this.id,
    this.displayName,
    this.bio,
    this.avatar,
    this.phone,
    this.location,
    this.website,
    this.socialLinks,
    this.preferences,
  });

  factory Profile.fromJson(Map<String, dynamic> json) {
    return Profile(
      id: json['id'],
      displayName: json['displayName'],
      bio: json['bio'],
      avatar: json['avatar'],
      phone: json['phone'],
      location: json['location'],
      website: json['website'],
      socialLinks: json['socialLinks'] != null
          ? SocialLinks.fromJson(json['socialLinks'])
          : null,
      preferences: json['preferences'] != null
          ? ProfilePreferences.fromJson(json['preferences'])
          : null,
    );
  }

  Map<String, dynamic> toJson() => {
        'id': id,
        'displayName': displayName,
        'bio': bio,
        'avatar': avatar,
        'phone': phone,
        'location': location,
        'website': website,
        'socialLinks': socialLinks?.toJson(),
        'preferences': preferences?.toJson(),
      };
}

class SocialLinks {
  final String? twitter;
  final String? github;
  final String? linkedin;
  final String? website;

  SocialLinks({
    this.twitter,
    this.github,
    this.linkedin,
    this.website,
  });

  factory SocialLinks.fromJson(Map<String, dynamic> json) {
    return SocialLinks(
      twitter: json['twitter'],
      github: json['github'],
      linkedin: json['linkedin'],
      website: json['website'],
    );
  }

  Map<String, dynamic> toJson() => {
        'twitter': twitter,
        'github': github,
        'linkedin': linkedin,
        'website': website,
      };
}

class ProfilePreferences {
  final String theme;
  final String language;
  final NotificationPreferences notifications;

  ProfilePreferences({
    required this.theme,
    required this.language,
    required this.notifications,
  });

  factory ProfilePreferences.fromJson(Map<String, dynamic> json) {
    return ProfilePreferences(
      theme: json['theme'] ?? 'SYSTEM',
      language: json['language'] ?? 'en',
      notifications: NotificationPreferences.fromJson(json['notifications']),
    );
  }

  Map<String, dynamic> toJson() => {
        'theme': theme,
        'language': language,
        'notifications': notifications.toJson(),
      };
}

class NotificationPreferences {
  final bool email;
  final bool push;
  final bool sms;

  NotificationPreferences({
    required this.email,
    required this.push,
    required this.sms,
  });

  factory NotificationPreferences.fromJson(Map<String, dynamic> json) {
    return NotificationPreferences(
      email: json['email'] ?? true,
      push: json['push'] ?? true,
      sms: json['sms'] ?? false,
    );
  }

  Map<String, dynamic> toJson() => {
        'email': email,
        'push': push,
        'sms': sms,
      };
}

class Organization {
  final String id;
  final String name;
  final String slug;
  final String? description;
  final String? logo;
  final List<OrganizationMember>? members;

  Organization({
    required this.id,
    required this.name,
    required this.slug,
    this.description,
    this.logo,
    this.members,
  });

  factory Organization.fromJson(Map<String, dynamic> json) {
    return Organization(
      id: json['id'],
      name: json['name'],
      slug: json['slug'],
      description: json['description'],
      logo: json['logo'],
      members: json['members'] != null
          ? (json['members'] as List)
              .map((e) => OrganizationMember.fromJson(e))
              .toList()
          : null,
    );
  }

  Map<String, dynamic> toJson() => {
        'id': id,
        'name': name,
        'slug': slug,
        'description': description,
        'logo': logo,
        'members': members?.map((e) => e.toJson()).toList(),
      };
}

class OrganizationMember {
  final String id;
  final User? user;
  final Organization? organization;
  final String role;
  final String joinedAt;

  OrganizationMember({
    required this.id,
    this.user,
    this.organization,
    required this.role,
    required this.joinedAt,
  });

  factory OrganizationMember.fromJson(Map<String, dynamic> json) {
    return OrganizationMember(
      id: json['id'],
      user: json['user'] != null ? User.fromJson(json['user']) : null,
      organization: json['organization'] != null
          ? Organization.fromJson(json['organization'])
          : null,
      role: json['role'],
      joinedAt: json['joinedAt'],
    );
  }

  Map<String, dynamic> toJson() => {
        'id': id,
        'user': user?.toJson(),
        'organization': organization?.toJson(),
        'role': role,
        'joinedAt': joinedAt,
      };
}

class AuthResponse {
  final User user;
  final String accessToken;
  final String refreshToken;
  final int expiresIn;

  AuthResponse({
    required this.user,
    required this.accessToken,
    required this.refreshToken,
    required this.expiresIn,
  });

  factory AuthResponse.fromJson(Map<String, dynamic> json) {
    return AuthResponse(
      user: User.fromJson(json['user']),
      accessToken: json['accessToken'],
      refreshToken: json['refreshToken'],
      expiresIn: json['expiresIn'],
    );
  }

  Map<String, dynamic> toJson() => {
        'user': user.toJson(),
        'accessToken': accessToken,
        'refreshToken': refreshToken,
        'expiresIn': expiresIn,
      };
}

class DashboardStats {
  final int totalUsers;
  final int totalOrganizations;
  final int activeUsers;
  final List<Activity> recentActivity;

  DashboardStats({
    required this.totalUsers,
    required this.totalOrganizations,
    required this.activeUsers,
    required this.recentActivity,
  });

  factory DashboardStats.fromJson(Map<String, dynamic> json) {
    return DashboardStats(
      totalUsers: json['totalUsers'],
      totalOrganizations: json['totalOrganizations'],
      activeUsers: json['activeUsers'],
      recentActivity: (json['recentActivity'] as List)
          .map((e) => Activity.fromJson(e))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() => {
        'totalUsers': totalUsers,
        'totalOrganizations': totalOrganizations,
        'activeUsers': activeUsers,
        'recentActivity': recentActivity.map((e) => e.toJson()).toList(),
      };
}

class Activity {
  final String id;
  final String type;
  final String description;
  final User user;
  final String timestamp;

  Activity({
    required this.id,
    required this.type,
    required this.description,
    required this.user,
    required this.timestamp,
  });

  factory Activity.fromJson(Map<String, dynamic> json) {
    return Activity(
      id: json['id'],
      type: json['type'],
      description: json['description'],
      user: User.fromJson(json['user']),
      timestamp: json['timestamp'],
    );
  }

  Map<String, dynamic> toJson() => {
        'id': id,
        'type': type,
        'description': description,
        'user': user.toJson(),
        'timestamp': timestamp,
      };
}