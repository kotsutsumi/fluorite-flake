// Prisma schema with Post model for demonstration

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("PRISMA_DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  emailVerified Boolean      @default(false)
  name          String?
  image         String?
  role          String       @default("user")
  MemberId   String?      @unique // 会員ID (管理画面で設定)
  memberSince   DateTime?    // 会員登録日
  sponsorInfo   Json?        // スポンサー情報 (JSON)
  metadata      Json?        // 追加のユーザーメタデータ
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  memberships   Member[]
  accessLogs    AccessLog[]
  devices       DeviceInfo[]
  videoContent  VideoContent[]
  facilities    Facility[]
  videoInteractions VideoInteraction[]
  videoComments VideoComment[]
}

model Post {
  id          String   @id @default(cuid())
  title       String
  content     String?
  published   Boolean  @default(false)
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([authorId])
  @@index([published])
}

model Account {
  id                     String   @id @default(cuid())
  userId                 String
  accountId              String
  providerId             String
  accessToken            String?
  refreshToken           String?
  idToken                String?
  accessTokenExpiresAt   DateTime?
  refreshTokenExpiresAt  DateTime?
  scope                  String?
  password               String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@index([userId])
}

model Session {
  id           String      @id @default(cuid())
  expiresAt    DateTime
  token        String      @unique
  ipAddress    String?
  userAgent    String?
  userId       String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessLogs   AccessLog[]

  @@index([userId])
}

model Verification {
  id          String   @id @default(cuid())
  identifier  String
  value       String
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([identifier])
}

model Organization {
  id         String       @id @default(cuid())
  name       String
  slug       String       @unique
  metadata   String?      // JSON stored as string for SQLite compatibility
  createdAt  DateTime     @default(now())
  members    Member[]
  invitations Invitation[]
  accessLogs AccessLog[]
}

model Member {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           String
  createdAt      DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

model Invitation {
  id             String       @id @default(cuid())
  email          String
  role           String
  status         String       @default("pending")
  organizationId String
  invitedBy      String?
  expiresAt      DateTime
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([organizationId])
}

model AccessLog {
  id            String       @id @default(cuid())
  userId        String?      // nullable for unauthenticated access
  sessionId     String?      // for authenticated sessions
  deviceId      String?      // for mobile device tracking
  ipAddress     String?
  userAgent     String?
  method        String       // GET, POST, etc.
  path          String       // URL path accessed
  query         String?      // query parameters as JSON
  statusCode    Int?         // HTTP status code
  responseTime  Int?         // response time in ms
  referrer      String?
  country       String?      // geolocation data
  city          String?
  platform      String?      // web, ios, android
  appVersion    String?      // for mobile app versioning
  organizationId String?     // if user belongs to organization
  createdAt     DateTime     @default(now())
  user          User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  session       Session?     @relation(fields: [sessionId], references: [id], onDelete: SetNull)
  device        DeviceInfo?  @relation(fields: [deviceId], references: [id], onDelete: SetNull)
  organization  Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([sessionId])
  @@index([deviceId])
  @@index([ipAddress])
  @@index([path])
  @@index([platform])
  @@index([createdAt])
  @@index([organizationId])
}

model DeviceInfo {
  id              String      @id @default(cuid())
  deviceId        String      @unique // unique device identifier (like Firebase Instance ID)
  platform        String      // ios, android, web
  osVersion       String?
  appVersion      String?
  deviceModel     String?
  deviceName      String?
  pushToken       String?     // for push notifications
  timezone        String?
  locale          String?
  userId          String?     // nullable - can track before login
  firstSeenAt     DateTime    @default(now())
  lastSeenAt      DateTime    @default(now())
  isActive        Boolean     @default(true)
  metadata        String?     // JSON for additional device info
  accessLogs      AccessLog[]
  user            User?       @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([deviceId])
  @@index([platform])
  @@index([userId])
  @@index([lastSeenAt])
}

// 会員向けビデオコンテンツ (リール動画)
model VideoContent {
  id              String         @id @default(cuid())
  title           String
  description     String?
  videoUrl        String         // 動画ファイルのURL
  thumbnailUrl    String?        // サムネイル画像のURL
  duration        Int?           // 動画の長さ (秒)
  contentType     String         @default("user_content") // "user_content", "commercial", "advertisement"
  isPublished     Boolean        @default(false)
  publishedAt     DateTime?
  tags            Json?          // タグ配列をJSONで保存
  location        Json?          // 位置情報 {lat, lng, address, weatherCondition}
  viewCount       Int            @default(0)
  likeCount       Int            @default(0)
  shareCount      Int            @default(0)
  commentCount    Int            @default(0)
  metadata        Json?          // 追加の動画メタデータ
  authorId        String
  author          User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  fishingResult   FishingResult? // 釣果情報
  sponsorLink     SponsorLink?   // スポンサーリンク (advertisement用)
  interactions    VideoInteraction[]
  comments        VideoComment[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([authorId])
  @@index([contentType])
  @@index([isPublished])
  @@index([publishedAt])
  @@index([viewCount])
  @@index([likeCount])
  @@index([createdAt])
}

// 釣果情報モデル
model FishingResult {
  id              String      @id @default(cuid())
  videoContentId  String      @unique
  videoContent    VideoContent @relation(fields: [videoContentId], references: [id], onDelete: Cascade)
  fishSpecies     String      // 魚種
  fishSize        Json?       // サイズ情報 {length: cm, weight: g}
  catchTime       DateTime?   // 釣った時間
  weatherCondition String?    // 天気状況
  waterCondition  Json?       // 水の状態 {temperature, clarity, current}
  technique       String?     // 釣法・テクニック
  baitUsed        String?     // 使用した餌
  gearUsed        FishingGearUsed[]
  difficulty      Int?        // 難易度 (1-5)
  notes           String?     // 特記事項
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([fishSpecies])
  @@index([catchTime])
}

// 釣具カタログ
model FishingGear {
  id              String      @id @default(cuid())
  name            String
  category        String      // "rod", "reel", "line", "hook", "lure", "bait", "accessory"
  brand           String?
  model           String?
  description     String?
  specifications  Json?       // 仕様情報
  price           Int?        // 価格 (円)
  images          Json?       // 商品画像URL配列
  affiliateUrl    String?     // アフィリエイトリンク
  isAvailable     Boolean     @default(true)
  rating          Float?      // 評価 (1-5)
  reviewCount     Int         @default(0)
  metadata        Json?       // 追加情報
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  gearUsed        FishingGearUsed[]

  @@index([category])
  @@index([brand])
  @@index([price])
  @@index([rating])
}

// 釣果で使用された釣具の関連
model FishingGearUsed {
  id              String        @id @default(cuid())
  fishingResultId String
  fishingGearId   String
  quantity        Int           @default(1)
  notes           String?       // 使用感・コメント
  rating          Int?          // この釣具への評価 (1-5)
  fishingResult   FishingResult @relation(fields: [fishingResultId], references: [id], onDelete: Cascade)
  fishingGear     FishingGear   @relation(fields: [fishingGearId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())

  @@unique([fishingResultId, fishingGearId])
  @@index([fishingResultId])
  @@index([fishingGearId])
}

// スポンサーリンク (広告動画用)
model SponsorLink {
  id              String       @id @default(cuid())
  videoContentId  String       @unique
  videoContent    VideoContent @relation(fields: [videoContentId], references: [id], onDelete: Cascade)
  sponsorName     String       // スポンサー名
  sponsorType     String       // "facility", "gear_shop", "tourism", "brand"
  linkUrl         String       // リンク先URL
  linkText        String       // リンクテキスト
  logoUrl         String?      // スポンサーロゴURL
  description     String?      // スポンサー説明
  campaignId      String?      // キャンペーンID
  trackingParams  Json?        // トラッキングパラメータ
  isActive        Boolean      @default(true)
  clickCount      Int          @default(0)
  impressionCount Int          @default(0)
  metadata        Json?        // 追加情報
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([sponsorType])
  @@index([isActive])
  @@index([campaignId])
}

// 動画インタラクション (いいね、フォロー等)
model VideoInteraction {
  id              String       @id @default(cuid())
  videoContentId  String
  userId          String
  interactionType String       // "like", "dislike", "follow_author", "share", "save"
  metadata        Json?        // 追加情報 (シェア先など)
  videoContent    VideoContent @relation(fields: [videoContentId], references: [id], onDelete: Cascade)
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime     @default(now())

  @@unique([videoContentId, userId, interactionType])
  @@index([videoContentId])
  @@index([userId])
  @@index([interactionType])
  @@index([createdAt])
}

// 動画コメント
model VideoComment {
  id              String       @id @default(cuid())
  videoContentId  String
  userId          String
  content         String
  parentId        String?      // 返信コメントの場合の親コメントID
  isVisible       Boolean      @default(true)
  likeCount       Int          @default(0)
  videoContent    VideoContent @relation(fields: [videoContentId], references: [id], onDelete: Cascade)
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent          VideoComment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies         VideoComment[] @relation("CommentReplies")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([videoContentId])
  @@index([userId])
  @@index([parentId])
  @@index([createdAt])
}

// スポンサー向け商業施設情報
model Facility {
  id              String      @id @default(cuid())
  name            String      // 施設名
  description     String?     // 施設説明
  category        String      // カテゴリー (釣り場、釣具店、宿泊施設、etc.)
  address         String?     // 住所
  location        Json?       // 位置情報 {lat, lng}
  contactInfo     Json?       // 連絡先情報 {phone, email, website}
  operatingHours  Json?       // 営業時間情報
  amenities       Json?       // 設備・サービス情報
  images          Json?       // 施設画像URL配列
  isPublished     Boolean     @default(false)
  publishedAt     DateTime?
  isFeatured      Boolean     @default(false) // 注目施設
  rating          Float?      // 評価 (1-5)
  reviewCount     Int         @default(0)
  metadata        Json?       // 追加のメタデータ
  ownerId         String      // スポンサーユーザーID
  owner           User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([ownerId])
  @@index([category])
  @@index([isPublished])
  @@index([isFeatured])
  @@index([rating])
}