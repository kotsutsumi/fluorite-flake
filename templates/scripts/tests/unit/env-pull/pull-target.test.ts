import { mkdtemp, readFile, rm, writeFile } from "node:fs/promises";
import { tmpdir } from "node:os";
import { join } from "node:path";

import { afterEach, describe, expect, it, vi } from "vitest";
import type { PullTargetOptions } from "../../../libs/env-pull/pull-target.js";
import { pullTarget } from "../../../libs/env-pull/pull-target.js";

const SANDBOXES: string[] = [];

async function createAppDir(): Promise<string> {
  const dir = await mkdtemp(join(tmpdir(), "env-pull-app-"));
  SANDBOXES.push(dir);
  return dir;
}

afterEach(async () => {
  await Promise.all(SANDBOXES.splice(0).map((dir) => rm(dir, { recursive: true, force: true })));
});

async function invokePullTarget(
  options: PullTargetOptions,
  remoteContent: string,
  assertions?: (args: readonly string[]) => void
): Promise<void> {
  const runCommand = vi.fn(async (_command, args, _commandOptions) => {
    if (assertions) {
      assertions(args);
    }
    const outputPath = args[2];
    await writeFile(outputPath, remoteContent, "utf8");
  });

  await pullTarget(options, { runCommand });
}

describe("pullTarget", () => {
  it("writes pulled environment variables to the target file", async () => {
    const appDir = await createAppDir();
    const remote = [
      "NEXT_PUBLIC_APP_URL=https://example.com",
      "BETTER_AUTH_URL=https://auth.example.com",
      "SHARED_TOKEN=abc123",
    ].join("\n");

    await invokePullTarget(
      {
        appName: "web",
        appDir,
        targetName: "production",
        projectConfig: { orgId: "org_123", projectId: "proj_123" },
        environment: { CUSTOM: "1" },
      },
      remote,
      (args) => {
        expect(args).toContain("--environment");
        expect(args).not.toContain("--git-branch");
      }
    );

    const content = await readFile(join(appDir, ".env.production"), "utf8");
    expect(content).toContain("# Generated by pnpm env:pull");
    expect(content).toContain("BETTER_AUTH_URL=https://auth.example.com");
    expect(content).toContain("NEXT_PUBLIC_APP_URL=https://example.com");
    expect(content).toContain("SHARED_TOKEN=abc123");
  });

  it("pulls from staging custom environment", async () => {
    const appDir = await createAppDir();
    const remote = ["NEXT_PUBLIC_APP_URL=https://staging.example.com"].join("\n");
    await invokePullTarget(
      {
        appName: "docs",
        appDir,
        targetName: "staging",
        projectConfig: null,
      },
      remote,
      (args) => {
        expect(args).toContain("--environment");
        expect(args).toContain("staging");
        expect(args).not.toContain("--git-branch");
      }
    );

    const content = await readFile(join(appDir, ".env.staging"), "utf8");
    expect(content).toContain("NEXT_PUBLIC_APP_URL=https://staging.example.com");
  });

  it("preserves environment variables from Vercel", async () => {
    const appDir = await createAppDir();
    const remote = [
      "NEXT_PUBLIC_APP_URL=https://api.example.com",
      "DATABASE_URL=postgresql://localhost/db",
      "API_KEY=secret123",
    ].join("\n");

    await invokePullTarget(
      {
        appName: "backend",
        appDir,
        targetName: "preview",
        projectConfig: { orgId: "org", projectId: "proj" },
      },
      remote
    );

    const content = await readFile(join(appDir, ".env.preview"), "utf8");
    expect(content).toContain("NEXT_PUBLIC_APP_URL=https://api.example.com");
    expect(content).toContain("DATABASE_URL=postgresql://localhost/db");
    expect(content).toContain("API_KEY=secret123");
  });

  it("includes git-branch argument when gitBranch is specified", async () => {
    // Dynamically import and mock TARGETS
    const mod = await import("../../../libs/env-push/types.js");
    const originalTargets = { ...mod.TARGETS };

    // Temporarily modify preview target to include gitBranch
    (mod.TARGETS.preview as any) = {
      ...originalTargets.preview,
      gitBranch: "develop",
    };

    const appDir = await createAppDir();
    const remote = ["NEXT_PUBLIC_APP_URL=https://branch.example.com"].join("\n");

    await invokePullTarget(
      {
        appName: "web",
        appDir,
        targetName: "preview",
        projectConfig: { orgId: "org_123", projectId: "proj_123" },
      },
      remote,
      (args) => {
        expect(args).toContain("--git-branch");
        expect(args).toContain("develop");
      }
    );

    const content = await readFile(join(appDir, ".env.preview"), "utf8");
    expect(content).toContain("NEXT_PUBLIC_APP_URL=https://branch.example.com");

    // Restore original TARGETS
    (mod.TARGETS.preview as any) = originalTargets.preview;
  });
});
