import { mkdtemp, readFile, rm, writeFile } from "node:fs/promises";
import { tmpdir } from "node:os";
import { join } from "node:path";

import { afterEach, describe, expect, it } from "vitest";
import { mergeEnvFile } from "../../../libs/env-pull/merge-env-file.js";

const SANDBOXES: string[] = [];

async function createTempFile(): Promise<string> {
  const dir = await mkdtemp(join(tmpdir(), "merge-env-"));
  SANDBOXES.push(dir);
  return join(dir, ".env.test");
}

afterEach(async () => {
  await Promise.all(SANDBOXES.splice(0).map((dir) => rm(dir, { recursive: true, force: true })));
});

describe("mergeEnvFile", () => {
  it("creates new file when no existing file exists", async () => {
    const filePath = await createTempFile();
    const newVariables = new Map([
      ["API_KEY", "secret123"],
      ["DATABASE_URL", "postgresql://localhost/db"],
      ["APP_NAME", "test-app"],
    ]);

    const content = await mergeEnvFile(filePath, newVariables, {
      appName: "web",
      targetName: "production",
    });

    expect(content).toContain("# Generated by pnpm env:pull");
    expect(content).toContain("# App: web");
    expect(content).toContain("# Target: production");
    expect(content).toContain("API_KEY=secret123");
    expect(content).toContain("APP_NAME=test-app");
    expect(content).toContain("DATABASE_URL=postgresql://localhost/db");
  });

  it("updates existing variables while preserving structure", async () => {
    const filePath = await createTempFile();
    const existingContent = [
      "# My custom configuration",
      "# for production environment",
      "",
      "API_KEY=old_secret",
      "DATABASE_URL=postgresql://localhost/old_db",
      "",
      "# Auth settings",
      "AUTH_ENABLED=true",
      "",
    ].join("\n");

    await writeFile(filePath, existingContent, "utf8");

    const newVariables = new Map([
      ["API_KEY", "new_secret"],
      ["DATABASE_URL", "postgresql://localhost/new_db"],
      ["AUTH_ENABLED", "false"],
    ]);

    const content = await mergeEnvFile(filePath, newVariables, {
      appName: "web",
      targetName: "production",
    });

    // コメントと構造が保持される
    expect(content).toContain("# My custom configuration");
    expect(content).toContain("# for production environment");
    expect(content).toContain("# Auth settings");

    // 値が更新される
    expect(content).toContain("API_KEY=new_secret");
    expect(content).toContain("DATABASE_URL=postgresql://localhost/new_db");
    expect(content).toContain("AUTH_ENABLED=false");

    // 古い値は含まれない
    expect(content).not.toContain("old_secret");
    expect(content).not.toContain("old_db");
  });

  it("adds new variables in a separate section", async () => {
    const filePath = await createTempFile();
    const existingContent = [
      "# Existing configuration",
      "",
      "API_KEY=secret123",
      "DATABASE_URL=postgresql://localhost/db",
      "",
    ].join("\n");

    await writeFile(filePath, existingContent, "utf8");

    const newVariables = new Map([
      ["API_KEY", "secret123"], // 既存（変更なし）
      ["DATABASE_URL", "postgresql://localhost/db"], // 既存（変更なし）
      ["NEW_FEATURE_FLAG", "enabled"], // 新規
      ["ANOTHER_NEW_VAR", "value"], // 新規
    ]);

    const content = await mergeEnvFile(filePath, newVariables, {
      appName: "backend",
      targetName: "staging",
    });

    // 既存部分が保持される
    expect(content).toContain("# Existing configuration");
    expect(content).toContain("API_KEY=secret123");
    expect(content).toContain("DATABASE_URL=postgresql://localhost/db");

    // 新規変数セクションが追加される
    expect(content).toContain("# ========================================");
    expect(content).toContain("# Added by pnpm env:pull");
    expect(content).toContain("# App: backend");
    expect(content).toContain("# Target: staging");
    expect(content).toContain("ANOTHER_NEW_VAR=value");
    expect(content).toContain("NEW_FEATURE_FLAG=enabled");
  });

  it("handles values with special characters", async () => {
    const filePath = await createTempFile();
    const existingContent = [
      "API_KEY=old_value",
      'DATABASE_URL="postgresql://localhost/db"',
      "",
    ].join("\n");

    await writeFile(filePath, existingContent, "utf8");

    const newVariables = new Map([
      ["API_KEY", "value with spaces"],
      ["DATABASE_URL", "postgresql://user:p@ss@localhost/db"],
    ]);

    const content = await mergeEnvFile(filePath, newVariables, {
      appName: "web",
      targetName: "production",
    });

    // スペースを含む値はクォートされる
    expect(content).toContain('API_KEY="value with spaces"');

    // @ を含む値もクォートされる
    expect(content).toContain('DATABASE_URL="postgresql://user:p@ss@localhost/db"');
  });

  it("preserves empty lines and comments", async () => {
    const filePath = await createTempFile();
    const existingContent = [
      "# Section 1",
      "",
      "VAR1=value1",
      "",
      "# Section 2",
      "# with multiple comment lines",
      "",
      "VAR2=value2",
      "",
    ].join("\n");

    await writeFile(filePath, existingContent, "utf8");

    const newVariables = new Map([
      ["VAR1", "updated1"],
      ["VAR2", "updated2"],
    ]);

    const content = await mergeEnvFile(filePath, newVariables, {
      appName: "web",
      targetName: "production",
    });

    // 空行が保持される
    const lines = content.split("\n");
    const emptyLineCount = lines.filter((line) => line.trim() === "").length;
    expect(emptyLineCount).toBeGreaterThan(0);

    // コメントが保持される
    expect(content).toContain("# Section 1");
    expect(content).toContain("# Section 2");
    expect(content).toContain("# with multiple comment lines");

    // 値が更新される
    expect(content).toContain("VAR1=updated1");
    expect(content).toContain("VAR2=updated2");
  });

  it("handles empty values correctly", async () => {
    const filePath = await createTempFile();
    const newVariables = new Map([
      ["EMPTY_VAR", ""],
      ["NON_EMPTY_VAR", "value"],
    ]);

    const content = await mergeEnvFile(filePath, newVariables, {
      appName: "web",
      targetName: "production",
    });

    expect(content).toContain("EMPTY_VAR=");
    expect(content).toContain("NON_EMPTY_VAR=value");
  });

  it("sorts new variables alphabetically", async () => {
    const filePath = await createTempFile();
    const existingContent = ["VAR_A=value_a", ""].join("\n");

    await writeFile(filePath, existingContent, "utf8");

    const newVariables = new Map([
      ["VAR_A", "value_a"],
      ["VAR_Z", "value_z"],
      ["VAR_M", "value_m"],
      ["VAR_B", "value_b"],
    ]);

    const content = await mergeEnvFile(filePath, newVariables, {
      appName: "web",
      targetName: "production",
    });

    // 新規変数がアルファベット順にソートされる
    const lines = content.split("\n");
    const varBIndex = lines.findIndex((line) => line.startsWith("VAR_B="));
    const varMIndex = lines.findIndex((line) => line.startsWith("VAR_M="));
    const varZIndex = lines.findIndex((line) => line.startsWith("VAR_Z="));

    expect(varBIndex).toBeGreaterThan(0);
    expect(varMIndex).toBeGreaterThan(varBIndex);
    expect(varZIndex).toBeGreaterThan(varMIndex);
  });

  it("writes merged content to file", async () => {
    const filePath = await createTempFile();
    const existingContent = ["OLD_VAR=old_value", ""].join("\n");

    await writeFile(filePath, existingContent, "utf8");

    const newVariables = new Map([
      ["OLD_VAR", "new_value"],
      ["NEW_VAR", "added_value"],
    ]);

    const content = await mergeEnvFile(filePath, newVariables, {
      appName: "web",
      targetName: "production",
    });

    // ファイルに書き込み
    await writeFile(filePath, content, "utf8");

    // 読み込んで検証
    const savedContent = await readFile(filePath, "utf8");
    expect(savedContent).toContain("OLD_VAR=new_value");
    expect(savedContent).toContain("NEW_VAR=added_value");
  });

  it("handles malformed lines as comments", async () => {
    const filePath = await createTempFile();
    const existingContent = [
      "VALID_VAR=value",
      "This is a malformed line without equals",
      "ANOTHER_VAR=another_value",
      "",
    ].join("\n");

    await writeFile(filePath, existingContent, "utf8");

    const newVariables = new Map([
      ["VALID_VAR", "updated_value"],
      ["ANOTHER_VAR", "updated_another"],
    ]);

    const content = await mergeEnvFile(filePath, newVariables, {
      appName: "web",
      targetName: "production",
    });

    // 不正な行はコメントとして保持される
    expect(content).toContain("This is a malformed line without equals");

    // 正しい変数は更新される
    expect(content).toContain("VALID_VAR=updated_value");
    expect(content).toContain("ANOTHER_VAR=updated_another");
  });
});

// EOF
